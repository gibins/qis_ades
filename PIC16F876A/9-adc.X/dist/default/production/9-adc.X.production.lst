

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Wed Jun 04 04:45:44 2025

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F876A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    11                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	dabs	1,0x7E,2
    15  0000                     
    16                           ; Version 2.10
    17                           ; Generated 31/07/2019 GMT
    18                           ; 
    19                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution.
    33                           ; 
    34                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    35                           ;        software without specific prior written permission.
    36                           ; 
    37                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    38                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    39                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    40                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    41                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    42                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    43                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    44                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    45                           ; 
    46                           ; 
    47                           ; Code-generator required, PIC16F876A Definitions
    48                           ; 
    49                           ; SFR Addresses
    50  0000                     	;# 
    51  0001                     	;# 
    52  0002                     	;# 
    53  0003                     	;# 
    54  0004                     	;# 
    55  0005                     	;# 
    56  0006                     	;# 
    57  0007                     	;# 
    58  000A                     	;# 
    59  000B                     	;# 
    60  000C                     	;# 
    61  000D                     	;# 
    62  000E                     	;# 
    63  000E                     	;# 
    64  000F                     	;# 
    65  0010                     	;# 
    66  0011                     	;# 
    67  0012                     	;# 
    68  0013                     	;# 
    69  0014                     	;# 
    70  0015                     	;# 
    71  0015                     	;# 
    72  0016                     	;# 
    73  0017                     	;# 
    74  0018                     	;# 
    75  0019                     	;# 
    76  001A                     	;# 
    77  001B                     	;# 
    78  001B                     	;# 
    79  001C                     	;# 
    80  001D                     	;# 
    81  001E                     	;# 
    82  001F                     	;# 
    83  0081                     	;# 
    84  0085                     	;# 
    85  0086                     	;# 
    86  0087                     	;# 
    87  008C                     	;# 
    88  008D                     	;# 
    89  008E                     	;# 
    90  0091                     	;# 
    91  0092                     	;# 
    92  0093                     	;# 
    93  0094                     	;# 
    94  0098                     	;# 
    95  0099                     	;# 
    96  009C                     	;# 
    97  009D                     	;# 
    98  009E                     	;# 
    99  009F                     	;# 
   100  010C                     	;# 
   101  010D                     	;# 
   102  010E                     	;# 
   103  010F                     	;# 
   104  018C                     	;# 
   105  018D                     	;# 
   106  0000                     	;# 
   107  0001                     	;# 
   108  0002                     	;# 
   109  0003                     	;# 
   110  0004                     	;# 
   111  0005                     	;# 
   112  0006                     	;# 
   113  0007                     	;# 
   114  000A                     	;# 
   115  000B                     	;# 
   116  000C                     	;# 
   117  000D                     	;# 
   118  000E                     	;# 
   119  000E                     	;# 
   120  000F                     	;# 
   121  0010                     	;# 
   122  0011                     	;# 
   123  0012                     	;# 
   124  0013                     	;# 
   125  0014                     	;# 
   126  0015                     	;# 
   127  0015                     	;# 
   128  0016                     	;# 
   129  0017                     	;# 
   130  0018                     	;# 
   131  0019                     	;# 
   132  001A                     	;# 
   133  001B                     	;# 
   134  001B                     	;# 
   135  001C                     	;# 
   136  001D                     	;# 
   137  001E                     	;# 
   138  001F                     	;# 
   139  0081                     	;# 
   140  0085                     	;# 
   141  0086                     	;# 
   142  0087                     	;# 
   143  008C                     	;# 
   144  008D                     	;# 
   145  008E                     	;# 
   146  0091                     	;# 
   147  0092                     	;# 
   148  0093                     	;# 
   149  0094                     	;# 
   150  0098                     	;# 
   151  0099                     	;# 
   152  009C                     	;# 
   153  009D                     	;# 
   154  009E                     	;# 
   155  009F                     	;# 
   156  010C                     	;# 
   157  010D                     	;# 
   158  010E                     	;# 
   159  010F                     	;# 
   160  018C                     	;# 
   161  018D                     	;# 
   162                           
   163                           	psect	strings
   164  0003                     __pstrings:	
   165  0003                     stringtab:	
   166  0003                     __stringtab:	
   167                           
   168                           ;	String table - string pointers are 1 byte each
   169  0003  1BFF               	btfsc	btemp+1,7
   170  0004  280D               	ljmp	stringcode
   171  0005  1383               	bcf	3,7
   172  0006  187F               	btfsc	btemp+1,0
   173  0007  1783               	bsf	3,7
   174  0008  0800               	movf	0,w
   175  0009  0A84               	incf	4,f
   176  000A  1903               	skipnz
   177  000B  0AFF               	incf	btemp+1,f
   178  000C  0008               	return
   179  000D                     stringcode:	
   180  000D                     stringdir:	
   181  000D  3000               	movlw	high stringdir
   182  000E  008A               	movwf	10
   183  000F  0804               	movf	4,w
   184  0010  0A84               	incf	4,f
   185  0011  0782               	addwf	2,f
   186  0012                     __stringbase:	
   187  0012  3400               	retlw	0
   188  0013                     __end_of__stringtab:	
   189  0013                     _dpowers:	
   190  0013  3401               	retlw	1
   191  0014  3400               	retlw	0
   192  0015  340A               	retlw	10
   193  0016  3400               	retlw	0
   194  0017  3464               	retlw	100
   195  0018  3400               	retlw	0
   196  0019  34E8               	retlw	232
   197  001A  3403               	retlw	3
   198  001B  3410               	retlw	16
   199  001C  3427               	retlw	39
   200  001D                     __end_of_dpowers:	
   201  001E                     _ADRESH	set	30
   202  0019                     _TXREG	set	25
   203  001F                     _ADCON0	set	31
   204  0018                     _RCSTA	set	24
   205  00FA                     _GO	set	250
   206  009E                     _ADRESL	set	158
   207  009F                     _ADCON1	set	159
   208  0099                     _SPBRG	set	153
   209  0098                     _TXSTA	set	152
   210  04C1                     _TRMT	set	1217
   211  0429                     _TRISA1	set	1065
   212  0428                     _TRISA0	set	1064
   213  001D                     STR_1:	
   214  001D  3441               	retlw	65	;'A'
   215  001E  3444               	retlw	68	;'D'
   216  001F  3443               	retlw	67	;'C'
   217  0020  3420               	retlw	32	;' '
   218  0021  3430               	retlw	48	;'0'
   219  0022  3420               	retlw	32	;' '
   220  0023  3456               	retlw	86	;'V'
   221  0024  3461               	retlw	97	;'a'
   222  0025  346C               	retlw	108	;'l'
   223  0026  3475               	retlw	117	;'u'
   224  0027  3465               	retlw	101	;'e'
   225  0028  3420               	retlw	32	;' '
   226  0029  3425               	retlw	37	;'%'
   227  002A  3464               	retlw	100	;'d'
   228  002B  3400               	retlw	0
   229  002C                     STR_3:	
   230  002C  3441               	retlw	65	;'A'
   231  002D  3444               	retlw	68	;'D'
   232  002E  3443               	retlw	67	;'C'
   233  002F  3420               	retlw	32	;' '
   234  0030  3432               	retlw	50	;'2'
   235  0031  3420               	retlw	32	;' '
   236  0032  3456               	retlw	86	;'V'
   237  0033  3461               	retlw	97	;'a'
   238  0034  346C               	retlw	108	;'l'
   239  0035  3475               	retlw	117	;'u'
   240  0036  3465               	retlw	101	;'e'
   241  0037  3420               	retlw	32	;' '
   242  0038  3425               	retlw	37	;'%'
   243  0039  3464               	retlw	100	;'d'
   244  003A  3400               	retlw	0
   245  003B                     STR_2:	
   246  003B  340D               	retlw	13
   247  003C  3400               	retlw	0
   248  003B                     
   249                           ; #config settings
   250  0000                     
   251                           	psect	cinit
   252  07FC                     start_initialization:	
   253  07FC                     __initialization:	
   254  07FC                     end_of_initialization:	
   255                           ;End of C runtime variable initialization code
   256                           
   257  07FC                     __end_of__initialization:	
   258  07FC  0183               	clrf	3
   259  07FD  120A  118A  2E9E   	ljmp	_main	;jump to C main() function
   260                           
   261                           	psect	cstackCOMMON
   262  0070                     __pcstackCOMMON:	
   263  0070                     ?_configRegiters:	
   264  0070                     ??_configRegiters:	
   265                           ; 1 bytes @ 0x0
   266                           
   267  0070                     ?_printMessage:	
   268                           ; 1 bytes @ 0x0
   269                           
   270  0070                     ?_main:	
   271                           ; 1 bytes @ 0x0
   272                           
   273  0070                     ?___lwdiv:	
   274                           ; 1 bytes @ 0x0
   275                           
   276  0070                     printMessage@message:	
   277                           ; 2 bytes @ 0x0
   278                           
   279  0070                     ___lwdiv@divisor:	
   280                           ; 2 bytes @ 0x0
   281                           
   282                           
   283                           ; 2 bytes @ 0x0
   284  0070                     	ds	2
   285  0072                     ??_printMessage:	
   286  0072                     ___lwdiv@dividend:	
   287                           ; 1 bytes @ 0x2
   288                           
   289                           
   290                           ; 2 bytes @ 0x2
   291  0072                     	ds	2
   292  0074                     ??___lwdiv:	
   293                           
   294                           ; 1 bytes @ 0x4
   295  0074                     	ds	1
   296  0075                     printMessage@i:	
   297  0075                     ___lwdiv@quotient:	
   298                           ; 2 bytes @ 0x5
   299                           
   300                           
   301                           ; 2 bytes @ 0x5
   302  0075                     	ds	2
   303  0077                     ___lwdiv@counter:	
   304                           
   305                           ; 1 bytes @ 0x7
   306  0077                     	ds	1
   307  0078                     ?___lwmod:	
   308  0078                     ___lwmod@divisor:	
   309                           ; 2 bytes @ 0x8
   310                           
   311                           
   312                           ; 2 bytes @ 0x8
   313  0078                     	ds	2
   314  007A                     ___lwmod@dividend:	
   315                           
   316                           ; 2 bytes @ 0xA
   317  007A                     	ds	2
   318  007C                     ??___lwmod:	
   319                           
   320                           ; 1 bytes @ 0xC
   321  007C                     	ds	1
   322  007D                     ___lwmod@counter:	
   323                           
   324                           ; 1 bytes @ 0xD
   325  007D                     	ds	1
   326                           
   327                           	psect	cstackBANK0
   328  0020                     __pcstackBANK0:	
   329  0020                     ?_sprintf:	
   330  0020                     sprintf@f:	
   331                           ; 2 bytes @ 0x0
   332                           
   333                           
   334                           ; 1 bytes @ 0x0
   335  0020                     	ds	3
   336  0023                     ??_sprintf:	
   337                           
   338                           ; 1 bytes @ 0x3
   339  0023                     	ds	3
   340  0026                     sprintf@ap:	
   341                           
   342                           ; 1 bytes @ 0x6
   343  0026                     	ds	1
   344  0027                     sprintf@flag:	
   345                           
   346                           ; 1 bytes @ 0x7
   347  0027                     	ds	1
   348  0028                     sprintf@prec:	
   349                           
   350                           ; 1 bytes @ 0x8
   351  0028                     	ds	1
   352  0029                     sprintf@val:	
   353                           
   354                           ; 2 bytes @ 0x9
   355  0029                     	ds	2
   356  002B                     sprintf@sp:	
   357                           
   358                           ; 1 bytes @ 0xB
   359  002B                     	ds	1
   360  002C                     sprintf@c:	
   361                           
   362                           ; 1 bytes @ 0xC
   363  002C                     	ds	1
   364  002D                     ??_main:	
   365                           
   366                           ; 1 bytes @ 0xD
   367  002D                     	ds	2
   368  002F                     main@encoded_result:	
   369                           
   370                           ; 40 bytes @ 0xF
   371  002F                     	ds	40
   372  0057                     main@adc_result:	
   373                           
   374                           ; 2 bytes @ 0x37
   375  0057                     	ds	2
   376                           
   377                           	psect	maintext
   378  069E                     __pmaintext:	
   379 ;;
   380 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   381 ;;
   382 ;; *************** function _main *****************
   383 ;; Defined at:
   384 ;;		line 56 in file "newmain.c"
   385 ;; Parameters:    Size  Location     Type
   386 ;;		None
   387 ;; Auto vars:     Size  Location     Type
   388 ;;  encoded_resu   40   15[BANK0 ] unsigned char [40]
   389 ;;  adc_result      2   55[BANK0 ] int 
   390 ;; Return value:  Size  Location     Type
   391 ;;                  1    wreg      void 
   392 ;; Registers used:
   393 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   394 ;; Tracked objects:
   395 ;;		On entry : B00/0
   396 ;;		On exit  : 0/0
   397 ;;		Unchanged: 0/0
   398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   399 ;;      Params:         0       0       0       0       0
   400 ;;      Locals:         0      42       0       0       0
   401 ;;      Temps:          0       2       0       0       0
   402 ;;      Totals:         0      44       0       0       0
   403 ;;Total ram usage:       44 bytes
   404 ;; Hardware stack levels required when called:    2
   405 ;; This function calls:
   406 ;;		_configRegiters
   407 ;;		_printMessage
   408 ;;		_sprintf
   409 ;; This function is called by:
   410 ;;		Startup code after reset
   411 ;; This function uses a non-reentrant model
   412 ;;
   413                           
   414                           
   415                           ;psect for function _main
   416  069E                     _main:	
   417  069E                     l970:	
   418                           ;incstack = 0
   419                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   420                           
   421                           
   422                           ;newmain.c: 58:     int adc_result;;newmain.c: 59:     char encoded_result[40];;newmain.
      +                          c: 61:     configRegiters();
   423  069E  120A  118A  25C7  120A  118A  	fcall	_configRegiters
   424  06A3                     l972:	
   425                           
   426                           ;newmain.c: 65:         ADCON0 = 0x41;
   427  06A3  3041               	movlw	65
   428  06A4  1283               	bcf	3,5	;RP0=0, select bank0
   429  06A5  1303               	bcf	3,6	;RP1=0, select bank0
   430  06A6  009F               	movwf	31	;volatile
   431  06A7                     l974:	
   432                           
   433                           ;newmain.c: 66:         GO = 1;
   434  06A7  151F               	bsf	31,2	;volatile
   435  06A8                     l46:	
   436                           ;newmain.c: 67:         while (GO == 1);
   437                           
   438  06A8  191F               	btfsc	31,2	;volatile
   439  06A9  2EAB               	goto	u511
   440  06AA  2EAC               	goto	u510
   441  06AB                     u511:	
   442  06AB  2EA8               	goto	l46
   443  06AC                     u510:	
   444  06AC                     l976:	
   445                           
   446                           ;newmain.c: 70:         adc_result = (ADRESH << 8) | ADRESL;
   447  06AC  081E               	movf	30,w	;volatile
   448  06AD  00D8               	movwf	main@adc_result+1
   449  06AE  1683               	bsf	3,5	;RP0=1, select bank1
   450  06AF  1303               	bcf	3,6	;RP1=0, select bank1
   451  06B0  081E               	movf	30,w	;volatile
   452  06B1  1283               	bcf	3,5	;RP0=0, select bank0
   453  06B2  1303               	bcf	3,6	;RP1=0, select bank0
   454  06B3  00D7               	movwf	main@adc_result
   455  06B4                     l978:	
   456                           
   457                           ;newmain.c: 71:         sprintf(encoded_result, "ADC 0 Value %d",adc_result);
   458  06B4  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   459  06B5  00AD               	movwf	??_main
   460  06B6  082D               	movf	??_main,w
   461  06B7  00A0               	movwf	sprintf@f
   462  06B8  0858               	movf	main@adc_result+1,w
   463  06B9  00A2               	movwf	?_sprintf+2
   464  06BA  0857               	movf	main@adc_result,w
   465  06BB  00A1               	movwf	?_sprintf+1
   466  06BC  302F               	movlw	(low (main@encoded_result| 0))& (0+255)
   467  06BD  120A  118A  2714  120A  118A  	fcall	_sprintf
   468  06C2                     l980:	
   469                           
   470                           ;newmain.c: 72:         printMessage("\r");
   471  06C2  3029               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   472  06C3  00F0               	movwf	printMessage@message
   473  06C4  3080               	movlw	128
   474  06C5  00F1               	movwf	printMessage@message+1
   475  06C6  120A  118A  2616  120A  118A  	fcall	_printMessage
   476  06CB                     l982:	
   477                           
   478                           ;newmain.c: 73:         printMessage(&encoded_result);
   479  06CB  302F               	movlw	(low (main@encoded_result| 0))& (0+255)
   480  06CC  00F0               	movwf	printMessage@message
   481  06CD  3000               	movlw	0
   482  06CE  00F1               	movwf	printMessage@message+1
   483  06CF  120A  118A  2616  120A  118A  	fcall	_printMessage
   484  06D4                     l984:	
   485                           
   486                           ;newmain.c: 74:         _delay((unsigned long)((30)*(4000000/4000.0)));
   487  06D4  3027               	movlw	39
   488  06D5  1283               	bcf	3,5	;RP0=0, select bank0
   489  06D6  1303               	bcf	3,6	;RP1=0, select bank0
   490  06D7  00AE               	movwf	??_main+1
   491  06D8  30F4               	movlw	244
   492  06D9  00AD               	movwf	??_main
   493  06DA                     u537:	
   494  06DA  0BAD               	decfsz	??_main,f
   495  06DB  2EDA               	goto	u537
   496  06DC  0BAE               	decfsz	??_main+1,f
   497  06DD  2EDA               	goto	u537
   498  06DE  0000               	nop
   499  06DF                     l986:	
   500                           
   501                           ;newmain.c: 76:         ADCON0 = 0x51;
   502  06DF  3051               	movlw	81
   503  06E0  1283               	bcf	3,5	;RP0=0, select bank0
   504  06E1  1303               	bcf	3,6	;RP1=0, select bank0
   505  06E2  009F               	movwf	31	;volatile
   506  06E3                     l988:	
   507                           
   508                           ;newmain.c: 77:          GO = 1;
   509  06E3  151F               	bsf	31,2	;volatile
   510  06E4                     l49:	
   511                           ;newmain.c: 78:         while (GO == 1);
   512                           
   513  06E4  191F               	btfsc	31,2	;volatile
   514  06E5  2EE7               	goto	u521
   515  06E6  2EE8               	goto	u520
   516  06E7                     u521:	
   517  06E7  2EE4               	goto	l49
   518  06E8                     u520:	
   519  06E8                     l990:	
   520                           
   521                           ;newmain.c: 79:         adc_result = (ADRESH << 8) | ADRESL;
   522  06E8  081E               	movf	30,w	;volatile
   523  06E9  00D8               	movwf	main@adc_result+1
   524  06EA  1683               	bsf	3,5	;RP0=1, select bank1
   525  06EB  1303               	bcf	3,6	;RP1=0, select bank1
   526  06EC  081E               	movf	30,w	;volatile
   527  06ED  1283               	bcf	3,5	;RP0=0, select bank0
   528  06EE  1303               	bcf	3,6	;RP1=0, select bank0
   529  06EF  00D7               	movwf	main@adc_result
   530  06F0                     l992:	
   531                           
   532                           ;newmain.c: 80:         sprintf(encoded_result, "ADC 2 Value %d",adc_result);
   533  06F0  301A               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   534  06F1  00AD               	movwf	??_main
   535  06F2  082D               	movf	??_main,w
   536  06F3  00A0               	movwf	sprintf@f
   537  06F4  0858               	movf	main@adc_result+1,w
   538  06F5  00A2               	movwf	?_sprintf+2
   539  06F6  0857               	movf	main@adc_result,w
   540  06F7  00A1               	movwf	?_sprintf+1
   541  06F8  302F               	movlw	(low (main@encoded_result| 0))& (0+255)
   542  06F9  120A  118A  2714  120A  118A  	fcall	_sprintf
   543  06FE                     l994:	
   544                           
   545                           ;newmain.c: 81:         printMessage("\r");
   546  06FE  3029               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   547  06FF  00F0               	movwf	printMessage@message
   548  0700  3080               	movlw	128
   549  0701  00F1               	movwf	printMessage@message+1
   550  0702  120A  118A  2616  120A  118A  	fcall	_printMessage
   551  0707                     l996:	
   552                           
   553                           ;newmain.c: 82:         printMessage(&encoded_result);
   554  0707  302F               	movlw	(low (main@encoded_result| 0))& (0+255)
   555  0708  00F0               	movwf	printMessage@message
   556  0709  3000               	movlw	0
   557  070A  00F1               	movwf	printMessage@message+1
   558  070B  120A  118A  2616  120A  118A  	fcall	_printMessage
   559  0710  2EA3               	goto	l972
   560  0711  120A  118A  2800   	ljmp	start
   561  0714                     __end_of_main:	
   562                           
   563                           	psect	text1
   564  0714                     __ptext1:	
   565 ;; *************** function _sprintf *****************
   566 ;; Defined at:
   567 ;;		line 505 in file "D:\pic\sources\c90\common\doprnt.c"
   568 ;; Parameters:    Size  Location     Type
   569 ;;  sp              1    wreg     PTR unsigned char 
   570 ;;		 -> main@encoded_result(40), 
   571 ;;  f               1    0[BANK0 ] PTR const unsigned char 
   572 ;;		 -> STR_3(15), STR_1(15), 
   573 ;; Auto vars:     Size  Location     Type
   574 ;;  sp              1   11[BANK0 ] PTR unsigned char 
   575 ;;		 -> main@encoded_result(40), 
   576 ;;  tmpval          4    0        struct .
   577 ;;  val             2    9[BANK0 ] unsigned int 
   578 ;;  cp              2    0        PTR const unsigned char 
   579 ;;  len             2    0        unsigned int 
   580 ;;  c               1   12[BANK0 ] unsigned char 
   581 ;;  prec            1    8[BANK0 ] char 
   582 ;;  flag            1    7[BANK0 ] unsigned char 
   583 ;;  ap              1    6[BANK0 ] PTR void [1]
   584 ;;		 -> ?_sprintf(2), 
   585 ;; Return value:  Size  Location     Type
   586 ;;                  2    0[BANK0 ] int 
   587 ;; Registers used:
   588 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   589 ;; Tracked objects:
   590 ;;		On entry : 0/0
   591 ;;		On exit  : 0/0
   592 ;;		Unchanged: 0/0
   593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   594 ;;      Params:         0       3       0       0       0
   595 ;;      Locals:         0       7       0       0       0
   596 ;;      Temps:          0       3       0       0       0
   597 ;;      Totals:         0      13       0       0       0
   598 ;;Total ram usage:       13 bytes
   599 ;; Hardware stack levels used:    1
   600 ;; Hardware stack levels required when called:    1
   601 ;; This function calls:
   602 ;;		___lwdiv
   603 ;;		___lwmod
   604 ;; This function is called by:
   605 ;;		_main
   606 ;; This function uses a non-reentrant model
   607 ;;
   608                           
   609                           
   610                           ;psect for function _sprintf
   611  0714                     _sprintf:	
   612                           
   613                           ;incstack = 0
   614                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   615                           ;sprintf@sp stored from wreg
   616  0714  1283               	bcf	3,5	;RP0=0, select bank0
   617  0715  1303               	bcf	3,6	;RP1=0, select bank0
   618  0716  00AB               	movwf	sprintf@sp
   619  0717                     l908:	
   620                           
   621                           ;D:\pic\sources\c90\common\doprnt.c: 505: sprintf(char * sp, const char * f, ...);D:\pic
      +                          \sources\c90\common\doprnt.c: 506: {;D:\pic\sources\c90\common\doprnt.c: 507:  va_list a
      +                          p;;D:\pic\sources\c90\common\doprnt.c: 512:  char c;;D:\pic\sources\c90\common\doprnt.c:
      +                           521:  signed char prec;;D:\pic\sources\c90\common\doprnt.c: 525:  unsigned char flag;;D
      +                          :\pic\sources\c90\common\doprnt.c: 543:  } tmpval;;D:\pic\sources\c90\common\doprnt.c: 5
      +                          45:  unsigned int val;;D:\pic\sources\c90\common\doprnt.c: 546:  unsigned len;
   622  0717  3021               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
   623  0718  00A3               	movwf	??_sprintf
   624  0719  0823               	movf	??_sprintf,w
   625  071A  00A6               	movwf	sprintf@ap
   626                           
   627                           ;D:\pic\sources\c90\common\doprnt.c: 553:  while((c = *f++)) {
   628  071B  2FE5               	goto	l960
   629  071C                     l910:	
   630                           
   631                           ;D:\pic\sources\c90\common\doprnt.c: 555:   if(c != '%')
   632  071C  3025               	movlw	37
   633  071D  062C               	xorwf	sprintf@c,w
   634  071E  1903               	btfsc	3,2
   635  071F  2F21               	goto	u441
   636  0720  2F22               	goto	u440
   637  0721                     u441:	
   638  0721  2F2E               	goto	l916
   639  0722                     u440:	
   640  0722                     l912:	
   641                           
   642                           ;D:\pic\sources\c90\common\doprnt.c: 557:   {;D:\pic\sources\c90\common\doprnt.c: 558:  
      +                            ((*sp++ = (c)));
   643  0722  082C               	movf	sprintf@c,w
   644  0723  00A3               	movwf	??_sprintf
   645  0724  082B               	movf	sprintf@sp,w
   646  0725  0084               	movwf	4
   647  0726  0823               	movf	??_sprintf,w
   648  0727  1383               	bcf	3,7	;select IRP bank0
   649  0728  0080               	movwf	0
   650  0729                     l914:	
   651  0729  3001               	movlw	1
   652  072A  00A3               	movwf	??_sprintf
   653  072B  0823               	movf	??_sprintf,w
   654  072C  07AB               	addwf	sprintf@sp,f
   655                           
   656                           ;D:\pic\sources\c90\common\doprnt.c: 559:    continue;
   657  072D  2FE5               	goto	l960
   658  072E                     l916:	
   659                           
   660                           ;D:\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
   661  072E  01A7               	clrf	sprintf@flag
   662  072F                     l920:	
   663                           ;D:\pic\sources\c90\common\doprnt.c: 661:   switch(c = *f++) {
   664                           
   665  072F  3001               	movlw	1
   666  0730  07A0               	addwf	sprintf@f,f
   667  0731  30FF               	movlw	-1
   668  0732  0720               	addwf	sprintf@f,w
   669  0733  0084               	movwf	4
   670  0734  120A  118A  200D  120A  118A  	fcall	stringdir
   671  0739  00AC               	movwf	sprintf@c
   672  073A  00A3               	movwf	??_sprintf
   673  073B  01A4               	clrf	??_sprintf+1
   674                           
   675                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   676                           ; Switch size 1, requested type "simple"
   677                           ; Number of cases is 1, Range of values is 0 to 0
   678                           ; switch strategies available:
   679                           ; Name         Instructions Cycles
   680                           ; simple_byte            4     3 (average)
   681                           ; direct_byte           11     8 (fixed)
   682                           ; jumptable            260     6 (fixed)
   683                           ;	Chosen strategy is simple_byte
   684  073C  0824               	movf	??_sprintf+1,w
   685  073D  3A00               	xorlw	0	; case 0
   686  073E  1903               	skipnz
   687  073F  2F41               	goto	l1018
   688  0740  2FE5               	goto	l960
   689  0741                     l1018:	
   690                           
   691                           ; Switch size 1, requested type "simple"
   692                           ; Number of cases is 3, Range of values is 0 to 105
   693                           ; switch strategies available:
   694                           ; Name         Instructions Cycles
   695                           ; simple_byte           10     6 (average)
   696                           ; jumptable            260     6 (fixed)
   697                           ;	Chosen strategy is simple_byte
   698  0741  0823               	movf	??_sprintf,w
   699  0742  3A00               	xorlw	0	; case 0
   700  0743  1903               	skipnz
   701  0744  2FF7               	goto	l962
   702  0745  3A64               	xorlw	100	; case 100
   703  0746  1903               	skipnz
   704  0747  2F4C               	goto	l922
   705  0748  3A0D               	xorlw	13	; case 105
   706  0749  1903               	skipnz
   707  074A  2F4C               	goto	l922
   708  074B  2FE5               	goto	l960
   709  074C                     l922:	
   710                           
   711                           ;D:\pic\sources\c90\common\doprnt.c: 1279:   {;D:\pic\sources\c90\common\doprnt.c: 1285:
      +                               val = (unsigned int)(*(int *)__va_arg((*(int **)ap), (int)0));
   712  074C  0826               	movf	sprintf@ap,w
   713  074D  0084               	movwf	4
   714  074E  1383               	bcf	3,7	;select IRP bank0
   715  074F  0800               	movf	0,w
   716  0750  00A9               	movwf	sprintf@val
   717  0751  0A84               	incf	4,f
   718  0752  0800               	movf	0,w
   719  0753  00AA               	movwf	sprintf@val+1
   720  0754                     l924:	
   721  0754  3002               	movlw	2
   722  0755  00A3               	movwf	??_sprintf
   723  0756  0823               	movf	??_sprintf,w
   724  0757  07A6               	addwf	sprintf@ap,f
   725  0758                     l926:	
   726                           
   727                           ;D:\pic\sources\c90\common\doprnt.c: 1287:    if((int)val < 0) {
   728  0758  1FAA               	btfss	sprintf@val+1,7
   729  0759  2F5B               	goto	u451
   730  075A  2F5C               	goto	u450
   731  075B                     u451:	
   732  075B  2F65               	goto	l932
   733  075C                     u450:	
   734  075C                     l928:	
   735                           
   736                           ;D:\pic\sources\c90\common\doprnt.c: 1288:     flag |= 0x03;
   737  075C  3003               	movlw	3
   738  075D  00A3               	movwf	??_sprintf
   739  075E  0823               	movf	??_sprintf,w
   740  075F  04A7               	iorwf	sprintf@flag,f
   741  0760                     l930:	
   742                           
   743                           ;D:\pic\sources\c90\common\doprnt.c: 1289:     val = -val;
   744  0760  09A9               	comf	sprintf@val,f
   745  0761  09AA               	comf	sprintf@val+1,f
   746  0762  0AA9               	incf	sprintf@val,f
   747  0763  1903               	skipnz
   748  0764  0AAA               	incf	sprintf@val+1,f
   749  0765                     l932:	
   750                           
   751                           ;D:\pic\sources\c90\common\doprnt.c: 1292:   };D:\pic\sources\c90\common\doprnt.c: 1331:
      +                              for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
   752  0765  01AC               	clrf	sprintf@c
   753  0766  0AAC               	incf	sprintf@c,f
   754  0767                     l938:	
   755                           
   756                           ;D:\pic\sources\c90\common\doprnt.c: 1332:     if(val < dpowers[c])
   757  0767  082C               	movf	sprintf@c,w
   758  0768  00A3               	movwf	??_sprintf
   759  0769  0723               	addwf	??_sprintf,w
   760  076A  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
   761  076B  0084               	movwf	4
   762  076C  120A  118A  200D  120A  118A  	fcall	stringdir
   763  0771  00A4               	movwf	??_sprintf+1
   764  0772  120A  118A  200D  120A  118A  	fcall	stringdir
   765  0777  00A5               	movwf	??_sprintf+2
   766  0778  0825               	movf	??_sprintf+2,w
   767  0779  022A               	subwf	sprintf@val+1,w
   768  077A  1D03               	skipz
   769  077B  2F7E               	goto	u465
   770  077C  0824               	movf	??_sprintf+1,w
   771  077D  0229               	subwf	sprintf@val,w
   772  077E                     u465:	
   773  077E  1803               	skipnc
   774  077F  2F81               	goto	u461
   775  0780  2F82               	goto	u460
   776  0781                     u461:	
   777  0781  2F83               	goto	l942
   778  0782                     u460:	
   779  0782  2F8D               	goto	l944
   780  0783                     l942:	
   781  0783  3001               	movlw	1
   782  0784  00A3               	movwf	??_sprintf
   783  0785  0823               	movf	??_sprintf,w
   784  0786  07AC               	addwf	sprintf@c,f
   785  0787  3005               	movlw	5
   786  0788  062C               	xorwf	sprintf@c,w
   787  0789  1D03               	btfss	3,2
   788  078A  2F8C               	goto	u471
   789  078B  2F8D               	goto	u470
   790  078C                     u471:	
   791  078C  2F67               	goto	l938
   792  078D                     u470:	
   793  078D                     l944:	
   794                           
   795                           ;D:\pic\sources\c90\common\doprnt.c: 1448:   {;D:\pic\sources\c90\common\doprnt.c: 1464:
      +                              if(flag & 0x03)
   796  078D  0827               	movf	sprintf@flag,w
   797  078E  3903               	andlw	3
   798  078F  1903               	btfsc	3,2
   799  0790  2F92               	goto	u481
   800  0791  2F93               	goto	u480
   801  0792                     u481:	
   802  0792  2F9E               	goto	l950
   803  0793                     u480:	
   804  0793                     l946:	
   805                           
   806                           ;D:\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++ = ('-')));
   807  0793  302D               	movlw	45
   808  0794  00A3               	movwf	??_sprintf
   809  0795  082B               	movf	sprintf@sp,w
   810  0796  0084               	movwf	4
   811  0797  0823               	movf	??_sprintf,w
   812  0798  1383               	bcf	3,7	;select IRP bank0
   813  0799  0080               	movwf	0
   814  079A                     l948:	
   815  079A  3001               	movlw	1
   816  079B  00A3               	movwf	??_sprintf
   817  079C  0823               	movf	??_sprintf,w
   818  079D  07AB               	addwf	sprintf@sp,f
   819  079E                     l950:	
   820                           
   821                           ;D:\pic\sources\c90\common\doprnt.c: 1495:   };D:\pic\sources\c90\common\doprnt.c: 1498:
      +                             prec = c;
   822  079E  082C               	movf	sprintf@c,w
   823  079F  00A3               	movwf	??_sprintf
   824  07A0  0823               	movf	??_sprintf,w
   825  07A1  00A8               	movwf	sprintf@prec
   826                           
   827                           ;D:\pic\sources\c90\common\doprnt.c: 1500:   while(prec--) {
   828  07A2  2FDC               	goto	l958
   829  07A3                     l952:	
   830                           
   831                           ;D:\pic\sources\c90\common\doprnt.c: 1504:    {;D:\pic\sources\c90\common\doprnt.c: 1515
      +                          :     c = (val / dpowers[(unsigned char)prec]) % 10 + '0';
   832  07A3  300A               	movlw	10
   833  07A4  00F8               	movwf	___lwmod@divisor
   834  07A5  3000               	movlw	0
   835  07A6  00F9               	movwf	___lwmod@divisor+1
   836  07A7  0828               	movf	sprintf@prec,w
   837  07A8  00A3               	movwf	??_sprintf
   838  07A9  0723               	addwf	??_sprintf,w
   839  07AA  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
   840  07AB  0084               	movwf	4
   841  07AC  120A  118A  200D  120A  118A  	fcall	stringdir
   842  07B1  00F0               	movwf	___lwdiv@divisor
   843  07B2  120A  118A  200D  120A  118A  	fcall	stringdir
   844  07B7  00F1               	movwf	___lwdiv@divisor+1
   845  07B8  082A               	movf	sprintf@val+1,w
   846  07B9  00F3               	movwf	___lwdiv@dividend+1
   847  07BA  0829               	movf	sprintf@val,w
   848  07BB  00F2               	movwf	___lwdiv@dividend
   849  07BC  120A  118A  265A  120A  118A  	fcall	___lwdiv
   850  07C1  0871               	movf	?___lwdiv+1,w
   851  07C2  00FB               	movwf	___lwmod@dividend+1
   852  07C3  0870               	movf	?___lwdiv,w
   853  07C4  00FA               	movwf	___lwmod@dividend
   854  07C5  120A  118A  25DC  120A  118A  	fcall	___lwmod
   855  07CA  0878               	movf	?___lwmod,w
   856  07CB  3E30               	addlw	48
   857  07CC  1283               	bcf	3,5	;RP0=0, select bank0
   858  07CD  1303               	bcf	3,6	;RP1=0, select bank0
   859  07CE  00A4               	movwf	??_sprintf+1
   860  07CF  0824               	movf	??_sprintf+1,w
   861  07D0  00AC               	movwf	sprintf@c
   862  07D1                     l954:	
   863                           
   864                           ;D:\pic\sources\c90\common\doprnt.c: 1549:    };D:\pic\sources\c90\common\doprnt.c: 1550
      +                          :    ((*sp++ = (c)));
   865  07D1  082C               	movf	sprintf@c,w
   866  07D2  00A3               	movwf	??_sprintf
   867  07D3  082B               	movf	sprintf@sp,w
   868  07D4  0084               	movwf	4
   869  07D5  0823               	movf	??_sprintf,w
   870  07D6  1383               	bcf	3,7	;select IRP bank0
   871  07D7  0080               	movwf	0
   872  07D8                     l956:	
   873  07D8  3001               	movlw	1
   874  07D9  00A3               	movwf	??_sprintf
   875  07DA  0823               	movf	??_sprintf,w
   876  07DB  07AB               	addwf	sprintf@sp,f
   877  07DC                     l958:	
   878                           
   879                           ;D:\pic\sources\c90\common\doprnt.c: 1500:   while(prec--) {
   880  07DC  30FF               	movlw	255
   881  07DD  00A3               	movwf	??_sprintf
   882  07DE  0823               	movf	??_sprintf,w
   883  07DF  07A8               	addwf	sprintf@prec,f
   884  07E0  0A28               	incf	sprintf@prec,w
   885  07E1  1D03               	btfss	3,2
   886  07E2  2FE4               	goto	u491
   887  07E3  2FE5               	goto	u490
   888  07E4                     u491:	
   889  07E4  2FA3               	goto	l952
   890  07E5                     u490:	
   891  07E5                     l960:	
   892                           
   893                           ;D:\pic\sources\c90\common\doprnt.c: 553:  while((c = *f++)) {
   894  07E5  3001               	movlw	1
   895  07E6  07A0               	addwf	sprintf@f,f
   896  07E7  30FF               	movlw	-1
   897  07E8  0720               	addwf	sprintf@f,w
   898  07E9  0084               	movwf	4
   899  07EA  120A  118A  200D  120A  118A  	fcall	stringdir
   900  07EF  00A3               	movwf	??_sprintf
   901  07F0  0823               	movf	??_sprintf,w
   902  07F1  00AC               	movwf	sprintf@c
   903  07F2  082C               	movf	sprintf@c,w
   904  07F3  1D03               	btfss	3,2
   905  07F4  2FF6               	goto	u501
   906  07F5  2FF7               	goto	u500
   907  07F6                     u501:	
   908  07F6  2F1C               	goto	l910
   909  07F7                     u500:	
   910  07F7                     l962:	
   911                           
   912                           ;D:\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
   913  07F7  082B               	movf	sprintf@sp,w
   914  07F8  0084               	movwf	4
   915  07F9  1383               	bcf	3,7	;select IRP bank0
   916  07FA  0180               	clrf	0
   917  07FB                     l164:	
   918  07FB  0008               	return
   919  07FC                     __end_of_sprintf:	
   920                           
   921                           	psect	text2
   922  05DC                     __ptext2:	
   923 ;; *************** function ___lwmod *****************
   924 ;; Defined at:
   925 ;;		line 5 in file "D:\pic\sources\c90\common\lwmod.c"
   926 ;; Parameters:    Size  Location     Type
   927 ;;  divisor         2    8[COMMON] unsigned int 
   928 ;;  dividend        2   10[COMMON] unsigned int 
   929 ;; Auto vars:     Size  Location     Type
   930 ;;  counter         1   13[COMMON] unsigned char 
   931 ;; Return value:  Size  Location     Type
   932 ;;                  2    8[COMMON] unsigned int 
   933 ;; Registers used:
   934 ;;		wreg, status,2, status,0
   935 ;; Tracked objects:
   936 ;;		On entry : 0/0
   937 ;;		On exit  : 0/0
   938 ;;		Unchanged: 0/0
   939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   940 ;;      Params:         4       0       0       0       0
   941 ;;      Locals:         1       0       0       0       0
   942 ;;      Temps:          1       0       0       0       0
   943 ;;      Totals:         6       0       0       0       0
   944 ;;Total ram usage:        6 bytes
   945 ;; Hardware stack levels used:    1
   946 ;; This function calls:
   947 ;;		Nothing
   948 ;; This function is called by:
   949 ;;		_sprintf
   950 ;; This function uses a non-reentrant model
   951 ;;
   952                           
   953                           
   954                           ;psect for function ___lwmod
   955  05DC                     ___lwmod:	
   956  05DC                     l872:	
   957                           ;incstack = 0
   958                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
   959                           
   960  05DC  0878               	movf	___lwmod@divisor,w
   961  05DD  0479               	iorwf	___lwmod@divisor+1,w
   962  05DE  1903               	btfsc	3,2
   963  05DF  2DE1               	goto	u341
   964  05E0  2DE2               	goto	u340
   965  05E1                     u341:	
   966  05E1  2E11               	goto	l890
   967  05E2                     u340:	
   968  05E2                     l874:	
   969  05E2  01FD               	clrf	___lwmod@counter
   970  05E3  0AFD               	incf	___lwmod@counter,f
   971  05E4  2DF0               	goto	l880
   972  05E5                     l876:	
   973  05E5  3001               	movlw	1
   974  05E6                     u355:	
   975  05E6  1003               	clrc
   976  05E7  0DF8               	rlf	___lwmod@divisor,f
   977  05E8  0DF9               	rlf	___lwmod@divisor+1,f
   978  05E9  3EFF               	addlw	-1
   979  05EA  1D03               	skipz
   980  05EB  2DE6               	goto	u355
   981  05EC                     l878:	
   982  05EC  3001               	movlw	1
   983  05ED  00FC               	movwf	??___lwmod
   984  05EE  087C               	movf	??___lwmod,w
   985  05EF  07FD               	addwf	___lwmod@counter,f
   986  05F0                     l880:	
   987  05F0  1FF9               	btfss	___lwmod@divisor+1,7
   988  05F1  2DF3               	goto	u361
   989  05F2  2DF4               	goto	u360
   990  05F3                     u361:	
   991  05F3  2DE5               	goto	l876
   992  05F4                     u360:	
   993  05F4                     l882:	
   994  05F4  0879               	movf	___lwmod@divisor+1,w
   995  05F5  027B               	subwf	___lwmod@dividend+1,w
   996  05F6  1D03               	skipz
   997  05F7  2DFA               	goto	u375
   998  05F8  0878               	movf	___lwmod@divisor,w
   999  05F9  027A               	subwf	___lwmod@dividend,w
  1000  05FA                     u375:	
  1001  05FA  1C03               	skipc
  1002  05FB  2DFD               	goto	u371
  1003  05FC  2DFE               	goto	u370
  1004  05FD                     u371:	
  1005  05FD  2E04               	goto	l886
  1006  05FE                     u370:	
  1007  05FE                     l884:	
  1008  05FE  0878               	movf	___lwmod@divisor,w
  1009  05FF  02FA               	subwf	___lwmod@dividend,f
  1010  0600  0879               	movf	___lwmod@divisor+1,w
  1011  0601  1C03               	skipc
  1012  0602  03FB               	decf	___lwmod@dividend+1,f
  1013  0603  02FB               	subwf	___lwmod@dividend+1,f
  1014  0604                     l886:	
  1015  0604  3001               	movlw	1
  1016  0605                     u385:	
  1017  0605  1003               	clrc
  1018  0606  0CF9               	rrf	___lwmod@divisor+1,f
  1019  0607  0CF8               	rrf	___lwmod@divisor,f
  1020  0608  3EFF               	addlw	-1
  1021  0609  1D03               	skipz
  1022  060A  2E05               	goto	u385
  1023  060B                     l888:	
  1024  060B  3001               	movlw	1
  1025  060C  02FD               	subwf	___lwmod@counter,f
  1026  060D  1D03               	btfss	3,2
  1027  060E  2E10               	goto	u391
  1028  060F  2E11               	goto	u390
  1029  0610                     u391:	
  1030  0610  2DF4               	goto	l882
  1031  0611                     u390:	
  1032  0611                     l890:	
  1033  0611  087B               	movf	___lwmod@dividend+1,w
  1034  0612  00F9               	movwf	?___lwmod+1
  1035  0613  087A               	movf	___lwmod@dividend,w
  1036  0614  00F8               	movwf	?___lwmod
  1037  0615                     l450:	
  1038  0615  0008               	return
  1039  0616                     __end_of___lwmod:	
  1040                           
  1041                           	psect	text3
  1042  065A                     __ptext3:	
  1043 ;; *************** function ___lwdiv *****************
  1044 ;; Defined at:
  1045 ;;		line 5 in file "D:\pic\sources\c90\common\lwdiv.c"
  1046 ;; Parameters:    Size  Location     Type
  1047 ;;  divisor         2    0[COMMON] unsigned int 
  1048 ;;  dividend        2    2[COMMON] unsigned int 
  1049 ;; Auto vars:     Size  Location     Type
  1050 ;;  quotient        2    5[COMMON] unsigned int 
  1051 ;;  counter         1    7[COMMON] unsigned char 
  1052 ;; Return value:  Size  Location     Type
  1053 ;;                  2    0[COMMON] unsigned int 
  1054 ;; Registers used:
  1055 ;;		wreg, status,2, status,0
  1056 ;; Tracked objects:
  1057 ;;		On entry : 0/0
  1058 ;;		On exit  : 0/0
  1059 ;;		Unchanged: 0/0
  1060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1061 ;;      Params:         4       0       0       0       0
  1062 ;;      Locals:         3       0       0       0       0
  1063 ;;      Temps:          1       0       0       0       0
  1064 ;;      Totals:         8       0       0       0       0
  1065 ;;Total ram usage:        8 bytes
  1066 ;; Hardware stack levels used:    1
  1067 ;; This function calls:
  1068 ;;		Nothing
  1069 ;; This function is called by:
  1070 ;;		_sprintf
  1071 ;; This function uses a non-reentrant model
  1072 ;;
  1073                           
  1074                           
  1075                           ;psect for function ___lwdiv
  1076  065A                     ___lwdiv:	
  1077  065A                     l846:	
  1078                           ;incstack = 0
  1079                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1080                           
  1081  065A  01F5               	clrf	___lwdiv@quotient
  1082  065B  01F6               	clrf	___lwdiv@quotient+1
  1083  065C                     l848:	
  1084  065C  0870               	movf	___lwdiv@divisor,w
  1085  065D  0471               	iorwf	___lwdiv@divisor+1,w
  1086  065E  1903               	btfsc	3,2
  1087  065F  2E61               	goto	u271
  1088  0660  2E62               	goto	u270
  1089  0661                     u271:	
  1090  0661  2E99               	goto	l868
  1091  0662                     u270:	
  1092  0662                     l850:	
  1093  0662  01F7               	clrf	___lwdiv@counter
  1094  0663  0AF7               	incf	___lwdiv@counter,f
  1095  0664  2E70               	goto	l856
  1096  0665                     l852:	
  1097  0665  3001               	movlw	1
  1098  0666                     u285:	
  1099  0666  1003               	clrc
  1100  0667  0DF0               	rlf	___lwdiv@divisor,f
  1101  0668  0DF1               	rlf	___lwdiv@divisor+1,f
  1102  0669  3EFF               	addlw	-1
  1103  066A  1D03               	skipz
  1104  066B  2E66               	goto	u285
  1105  066C                     l854:	
  1106  066C  3001               	movlw	1
  1107  066D  00F4               	movwf	??___lwdiv
  1108  066E  0874               	movf	??___lwdiv,w
  1109  066F  07F7               	addwf	___lwdiv@counter,f
  1110  0670                     l856:	
  1111  0670  1FF1               	btfss	___lwdiv@divisor+1,7
  1112  0671  2E73               	goto	u291
  1113  0672  2E74               	goto	u290
  1114  0673                     u291:	
  1115  0673  2E65               	goto	l852
  1116  0674                     u290:	
  1117  0674                     l858:	
  1118  0674  3001               	movlw	1
  1119  0675                     u305:	
  1120  0675  1003               	clrc
  1121  0676  0DF5               	rlf	___lwdiv@quotient,f
  1122  0677  0DF6               	rlf	___lwdiv@quotient+1,f
  1123  0678  3EFF               	addlw	-1
  1124  0679  1D03               	skipz
  1125  067A  2E75               	goto	u305
  1126  067B  0871               	movf	___lwdiv@divisor+1,w
  1127  067C  0273               	subwf	___lwdiv@dividend+1,w
  1128  067D  1D03               	skipz
  1129  067E  2E81               	goto	u315
  1130  067F  0870               	movf	___lwdiv@divisor,w
  1131  0680  0272               	subwf	___lwdiv@dividend,w
  1132  0681                     u315:	
  1133  0681  1C03               	skipc
  1134  0682  2E84               	goto	u311
  1135  0683  2E85               	goto	u310
  1136  0684                     u311:	
  1137  0684  2E8C               	goto	l864
  1138  0685                     u310:	
  1139  0685                     l860:	
  1140  0685  0870               	movf	___lwdiv@divisor,w
  1141  0686  02F2               	subwf	___lwdiv@dividend,f
  1142  0687  0871               	movf	___lwdiv@divisor+1,w
  1143  0688  1C03               	skipc
  1144  0689  03F3               	decf	___lwdiv@dividend+1,f
  1145  068A  02F3               	subwf	___lwdiv@dividend+1,f
  1146  068B                     l862:	
  1147  068B  1475               	bsf	___lwdiv@quotient,0
  1148  068C                     l864:	
  1149  068C  3001               	movlw	1
  1150  068D                     u325:	
  1151  068D  1003               	clrc
  1152  068E  0CF1               	rrf	___lwdiv@divisor+1,f
  1153  068F  0CF0               	rrf	___lwdiv@divisor,f
  1154  0690  3EFF               	addlw	-1
  1155  0691  1D03               	skipz
  1156  0692  2E8D               	goto	u325
  1157  0693                     l866:	
  1158  0693  3001               	movlw	1
  1159  0694  02F7               	subwf	___lwdiv@counter,f
  1160  0695  1D03               	btfss	3,2
  1161  0696  2E98               	goto	u331
  1162  0697  2E99               	goto	u330
  1163  0698                     u331:	
  1164  0698  2E74               	goto	l858
  1165  0699                     u330:	
  1166  0699                     l868:	
  1167  0699  0876               	movf	___lwdiv@quotient+1,w
  1168  069A  00F1               	movwf	?___lwdiv+1
  1169  069B  0875               	movf	___lwdiv@quotient,w
  1170  069C  00F0               	movwf	?___lwdiv
  1171  069D                     l440:	
  1172  069D  0008               	return
  1173  069E                     __end_of___lwdiv:	
  1174                           
  1175                           	psect	text4
  1176  0616                     __ptext4:	
  1177 ;; *************** function _printMessage *****************
  1178 ;; Defined at:
  1179 ;;		line 47 in file "newmain.c"
  1180 ;; Parameters:    Size  Location     Type
  1181 ;;  message         2    0[COMMON] PTR unsigned char 
  1182 ;;		 -> STR_4(2), STR_2(2), main@encoded_result(40), 
  1183 ;; Auto vars:     Size  Location     Type
  1184 ;;  i               2    5[COMMON] int 
  1185 ;; Return value:  Size  Location     Type
  1186 ;;                  1    wreg      void 
  1187 ;; Registers used:
  1188 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  1189 ;; Tracked objects:
  1190 ;;		On entry : 0/0
  1191 ;;		On exit  : 0/0
  1192 ;;		Unchanged: 0/0
  1193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1194 ;;      Params:         2       0       0       0       0
  1195 ;;      Locals:         2       0       0       0       0
  1196 ;;      Temps:          3       0       0       0       0
  1197 ;;      Totals:         7       0       0       0       0
  1198 ;;Total ram usage:        7 bytes
  1199 ;; Hardware stack levels used:    2
  1200 ;; This function calls:
  1201 ;;		Nothing
  1202 ;; This function is called by:
  1203 ;;		_main
  1204 ;; This function uses a non-reentrant model
  1205 ;;
  1206                           
  1207                           
  1208                           ;psect for function _printMessage
  1209  0616                     _printMessage:	
  1210  0616                     l900:	
  1211                           ;incstack = 0
  1212                           ; Regs used in _printMessage: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  1213                           
  1214                           
  1215                           ;newmain.c: 49:     for (int i = 0; message[i] != '\0'; i++) {
  1216  0616  01F5               	clrf	printMessage@i
  1217  0617  01F6               	clrf	printMessage@i+1
  1218  0618  2E3D               	goto	l906
  1219  0619                     l902:	
  1220                           
  1221                           ;newmain.c: 50:         TXREG = message[i];
  1222  0619  0875               	movf	printMessage@i,w
  1223  061A  0770               	addwf	printMessage@message,w
  1224  061B  00F3               	movwf	??_printMessage+1
  1225  061C  0871               	movf	printMessage@message+1,w
  1226  061D  00F2               	movwf	??_printMessage
  1227  061E  1803               	skipnc
  1228  061F  0AF2               	incf	??_printMessage,f
  1229  0620  1FF5               	btfss	printMessage@i,7
  1230  0621  2E23               	goto	u400
  1231  0622  03F2               	decf	??_printMessage,f
  1232  0623                     u400:	
  1233  0623  0872               	movf	??_printMessage,w
  1234  0624  00F4               	movwf	??_printMessage+2
  1235  0625  0874               	movf	??_printMessage+2,w
  1236  0626  1283               	bcf	3,5	;RP0=0, select bank0
  1237  0627  1303               	bcf	3,6	;RP1=0, select bank0
  1238  0628  00FF               	movwf	btemp+1
  1239  0629  0873               	movf	??_printMessage+1,w
  1240  062A  0084               	movwf	4
  1241  062B  120A  118A  2003  120A  118A  	fcall	stringtab
  1242  0630  0099               	movwf	25	;volatile
  1243  0631                     l36:	
  1244                           ;newmain.c: 51:         while (TRMT == 0);
  1245                           
  1246  0631  1683               	bsf	3,5	;RP0=1, select bank1
  1247  0632  1303               	bcf	3,6	;RP1=0, select bank1
  1248  0633  1C98               	btfss	24,1	;volatile
  1249  0634  2E36               	goto	u411
  1250  0635  2E37               	goto	u410
  1251  0636                     u411:	
  1252  0636  2E31               	goto	l36
  1253  0637                     u410:	
  1254  0637                     l904:	
  1255                           
  1256                           ;newmain.c: 52:     }
  1257  0637  3001               	movlw	1
  1258  0638  07F5               	addwf	printMessage@i,f
  1259  0639  1803               	skipnc
  1260  063A  0AF6               	incf	printMessage@i+1,f
  1261  063B  3000               	movlw	0
  1262  063C  07F6               	addwf	printMessage@i+1,f
  1263  063D                     l906:	
  1264  063D  0875               	movf	printMessage@i,w
  1265  063E  0770               	addwf	printMessage@message,w
  1266  063F  00F3               	movwf	??_printMessage+1
  1267  0640  0871               	movf	printMessage@message+1,w
  1268  0641  00F2               	movwf	??_printMessage
  1269  0642  1803               	skipnc
  1270  0643  0AF2               	incf	??_printMessage,f
  1271  0644  1FF5               	btfss	printMessage@i,7
  1272  0645  2E47               	goto	u420
  1273  0646  03F2               	decf	??_printMessage,f
  1274  0647                     u420:	
  1275  0647  0872               	movf	??_printMessage,w
  1276  0648  00F4               	movwf	??_printMessage+2
  1277  0649  0874               	movf	??_printMessage+2,w
  1278  064A  1283               	bcf	3,5	;RP0=0, select bank0
  1279  064B  1303               	bcf	3,6	;RP1=0, select bank0
  1280  064C  00FF               	movwf	btemp+1
  1281  064D  0873               	movf	??_printMessage+1,w
  1282  064E  0084               	movwf	4
  1283  064F  120A  118A  2003  120A  118A  	fcall	stringtab
  1284  0654  3A00               	xorlw	0
  1285  0655  1D03               	skipz
  1286  0656  2E58               	goto	u431
  1287  0657  2E59               	goto	u430
  1288  0658                     u431:	
  1289  0658  2E19               	goto	l902
  1290  0659                     u430:	
  1291  0659                     l40:	
  1292  0659  0008               	return
  1293  065A                     __end_of_printMessage:	
  1294                           
  1295                           	psect	text5
  1296  05C7                     __ptext5:	
  1297 ;; *************** function _configRegiters *****************
  1298 ;; Defined at:
  1299 ;;		line 28 in file "newmain.c"
  1300 ;; Parameters:    Size  Location     Type
  1301 ;;		None
  1302 ;; Auto vars:     Size  Location     Type
  1303 ;;		None
  1304 ;; Return value:  Size  Location     Type
  1305 ;;                  1    wreg      void 
  1306 ;; Registers used:
  1307 ;;		wreg
  1308 ;; Tracked objects:
  1309 ;;		On entry : 0/0
  1310 ;;		On exit  : 0/0
  1311 ;;		Unchanged: 0/0
  1312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1313 ;;      Params:         0       0       0       0       0
  1314 ;;      Locals:         0       0       0       0       0
  1315 ;;      Temps:          0       0       0       0       0
  1316 ;;      Totals:         0       0       0       0       0
  1317 ;;Total ram usage:        0 bytes
  1318 ;; Hardware stack levels used:    1
  1319 ;; This function calls:
  1320 ;;		Nothing
  1321 ;; This function is called by:
  1322 ;;		_main
  1323 ;; This function uses a non-reentrant model
  1324 ;;
  1325                           
  1326                           
  1327                           ;psect for function _configRegiters
  1328  05C7                     _configRegiters:	
  1329  05C7                     l894:	
  1330                           ;incstack = 0
  1331                           ; Regs used in _configRegiters: [wreg]
  1332                           
  1333                           
  1334                           ;newmain.c: 30:     TXSTA = 0x24;
  1335  05C7  3024               	movlw	36
  1336  05C8  1683               	bsf	3,5	;RP0=1, select bank1
  1337  05C9  1303               	bcf	3,6	;RP1=0, select bank1
  1338  05CA  0098               	movwf	24	;volatile
  1339                           
  1340                           ;newmain.c: 31:     RCSTA = 0x90;
  1341  05CB  3090               	movlw	144
  1342  05CC  1283               	bcf	3,5	;RP0=0, select bank0
  1343  05CD  1303               	bcf	3,6	;RP1=0, select bank0
  1344  05CE  0098               	movwf	24	;volatile
  1345                           
  1346                           ;newmain.c: 32:     SPBRG = 25;
  1347  05CF  3019               	movlw	25
  1348  05D0  1683               	bsf	3,5	;RP0=1, select bank1
  1349  05D1  1303               	bcf	3,6	;RP1=0, select bank1
  1350  05D2  0099               	movwf	25	;volatile
  1351  05D3                     l896:	
  1352                           
  1353                           ;newmain.c: 36:     TRISA0 = 1;
  1354  05D3  1405               	bsf	5,0	;volatile
  1355  05D4                     l898:	
  1356                           
  1357                           ;newmain.c: 37:     TRISA1 = 1;
  1358  05D4  1485               	bsf	5,1	;volatile
  1359                           
  1360                           ;newmain.c: 39:     ADCON1 = 0x80;
  1361  05D5  3080               	movlw	128
  1362  05D6  009F               	movwf	31	;volatile
  1363                           
  1364                           ;newmain.c: 40:     ADCON0 = 0x41;
  1365  05D7  3041               	movlw	65
  1366  05D8  1283               	bcf	3,5	;RP0=0, select bank0
  1367  05D9  1303               	bcf	3,6	;RP1=0, select bank0
  1368  05DA  009F               	movwf	31	;volatile
  1369  05DB                     l31:	
  1370  05DB  0008               	return
  1371  05DC                     __end_of_configRegiters:	
  1372  007E                     btemp	set	126	;btemp
  1373  007E                     wtemp0	set	126


Data Sizes:
    Strings     32
    Constant    10
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     57      57
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 15
		 -> STR_3(CODE[15]), STR_1(CODE[15]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 40
		 -> main@encoded_result(BANK0[40]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    printMessage@message	PTR unsigned char  size(2) Largest target is 40
		 -> STR_4(CODE[2]), STR_2(CODE[2]), main@encoded_result(BANK0[40]), 


Critical Paths under _main in COMMON

    _sprintf->___lwmod
    ___lwmod->___lwdiv

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                44    44      0    1858
                                             13 BANK0     44    44      0
                     _configRegiters
                       _printMessage
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    18      3    1320
                                              0 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     311
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     314
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (2) _printMessage                                         7     5      2     394
                                              0 COMMON     7     5      2
 ---------------------------------------------------------------------------------
 (1) _configRegiters                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _configRegiters
   _printMessage
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     39      39       5       71.3%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Wed Jun 04 04:45:44 2025

                      pc 0002              __CFG_CP$OFF 0000                       l31 05DB  
                     l40 0659                       l36 0631                       l46 06A8  
                     l49 06E4                       _GO 00FA                       fsr 0004  
                    l164 07FB                      l440 069D                      l450 0615  
                    l900 0616                      l902 0619                      l910 071C  
                    l904 0637                      l920 072F                      l912 0722  
                    l906 063D                      l850 0662                      l930 0760  
                    l922 074C                      l914 0729                      l860 0685  
                    l852 0665                      l932 0765                      l924 0754  
                    l916 072E                      l908 0717                      l862 068B  
                    l854 066C                      l846 065A                      l950 079E  
                    l942 0783                      l926 0758                      l864 068C  
                    l856 0670                      l848 065C                      l880 05F0  
                    l872 05DC                      l952 07A3                      l944 078D  
                    l928 075C                      l960 07E5                      l866 0693  
                    l858 0674                      l882 05F4                      l874 05E2  
                    l890 0611                      l954 07D1                      l946 0793  
                    l938 0767                      l962 07F7                      l970 069E  
                    l868 0699                      l884 05FE                      l876 05E5  
                    l956 07D8                      l948 079A                      l980 06C2  
                    l972 06A3                      l894 05C7                      l886 0604  
                    l878 05EC                      l958 07DC                      l990 06E8  
                    l982 06CB                      l974 06A7                      l896 05D3  
                    l888 060B                      l992 06F0                      l984 06D4  
                    l976 06AC                      l898 05D4                      l994 06FE  
                    l986 06DF                      l978 06B4                      l996 0707  
                    l988 06E3                      u310 0685                      u311 0684  
                    u400 0623                      u305 0675                      u410 0637  
                    u330 0699                      u411 0636                      u331 0698  
                    u315 0681                      u420 0647                      u340 05E2  
                    u500 07F7                      u325 068D                      u341 05E1  
                    u501 07F6                      u430 0659                      u270 0662  
                    u510 06AC                      u431 0658                      u271 0661  
                    u511 06AB                      u360 05F4                      u440 0722  
                    u520 06E8                      u361 05F3                      u441 0721  
                    u521 06E7                      u290 0674                      u370 05FE  
                    u450 075C             __CFG_CPD$OFF 0000                      u291 0673  
                    u371 05FD                      u355 05E6                      u451 075B  
                    u460 0782                      u285 0666                      u461 0781  
                    u390 0611                      u470 078D                      u391 0610  
                    u375 05FA                      u471 078C                      u480 0793  
                    u385 0605                      u481 0792                      u465 077E  
                    u537 06DA                      u490 07E5                      u491 07E4  
                    fsr0 0004                      indf 0000             __CFG_LVP$OFF 0000  
                   l1018 0741                     STR_1 001D                     STR_2 003B  
                   STR_3 002C                     STR_4 003B                     _TRMT 04C1  
           __CFG_WRT$OFF 0000                     _main 069E                     btemp 007E  
          printMessage@i 0075                     start 0000                    ?_main 0070  
          __CFG_WDTE$OFF 0000          __end_of___lwdiv 069E          __end_of___lwmod 0616  
                  _RCSTA 0018                    _SPBRG 0099                    _TXREG 0019  
                  _TXSTA 0098          __end_of_dpowers 001D           __CFG_BOREN$OFF 0000  
                  pclath 000A                    status 0003                    wtemp0 007E  
        __end_of_sprintf 07FC          __initialization 07FC             __end_of_main 0714  
                 ??_main 002D                   _ADCON0 001F                   _ADCON1 009F  
                 _ADRESH 001E                   _ADRESL 009E                   _TRISA0 0428  
                 _TRISA1 0429           __CFG_PWRTE$OFF 0000         ??_configRegiters 0070  
              ??___lwdiv 0074                ??___lwmod 007C                ??_sprintf 0023  
         main@adc_result 0057          __CFG_FOSC$EXTRC 0000  __end_of__initialization 07FC  
     main@encoded_result 002F           __pcstackCOMMON 0070               __pmaintext 069E  
             __stringtab 0003                  ___lwdiv 065A                  ___lwmod 05DC  
                __ptext1 0714                  __ptext2 05DC                  __ptext3 065A  
                __ptext4 0616                  __ptext5 05C7                  _dpowers 0013  
                _sprintf 0714     end_of_initialization 07FC            ?_printMessage 0070  
         ??_printMessage 0072      start_initialization 07FC  __size_of_configRegiters 0015  
              ___latbits 0002            __pcstackBANK0 0020              sprintf@flag 0027  
            sprintf@prec 0028         ___lwdiv@dividend 0072                 ?___lwdiv 0070  
               ?___lwmod 0078                __pstrings 0003         ___lwdiv@quotient 0075  
               ?_sprintf 0020     __end_of_printMessage 065A      printMessage@message 0070  
            __stringbase 0012         __size_of___lwdiv 0044         __size_of___lwmod 003A  
     __end_of__stringtab 0013           _configRegiters 05C7               sprintf@val 0029  
        ___lwdiv@divisor 0070          ___lwdiv@counter 0077         __size_of_sprintf 00E8  
          __size_of_main 0076   __end_of_configRegiters 05DC    __size_of_printMessage 0044  
              sprintf@ap 0026                sprintf@sp 002B         ___lwmod@dividend 007A  
              stringcode 000D          ?_configRegiters 0070             _printMessage 0616  
               sprintf@c 002C                 sprintf@f 0020          ___lwmod@divisor 0078  
        ___lwmod@counter 007D                 stringdir 000D                 stringtab 0003  
