

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Tue Jun 10 19:28:37 2025

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F876A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	dabs	1,0x7E,2
    22  0000                     
    23                           ; Version 2.10
    24                           ; Generated 31/07/2019 GMT
    25                           ; 
    26                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC16F876A Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     	;# 
    58  0001                     	;# 
    59  0002                     	;# 
    60  0003                     	;# 
    61  0004                     	;# 
    62  0005                     	;# 
    63  0006                     	;# 
    64  0007                     	;# 
    65  000A                     	;# 
    66  000B                     	;# 
    67  000C                     	;# 
    68  000D                     	;# 
    69  000E                     	;# 
    70  000E                     	;# 
    71  000F                     	;# 
    72  0010                     	;# 
    73  0011                     	;# 
    74  0012                     	;# 
    75  0013                     	;# 
    76  0014                     	;# 
    77  0015                     	;# 
    78  0015                     	;# 
    79  0016                     	;# 
    80  0017                     	;# 
    81  0018                     	;# 
    82  0019                     	;# 
    83  001A                     	;# 
    84  001B                     	;# 
    85  001B                     	;# 
    86  001C                     	;# 
    87  001D                     	;# 
    88  001E                     	;# 
    89  001F                     	;# 
    90  0081                     	;# 
    91  0085                     	;# 
    92  0086                     	;# 
    93  0087                     	;# 
    94  008C                     	;# 
    95  008D                     	;# 
    96  008E                     	;# 
    97  0091                     	;# 
    98  0092                     	;# 
    99  0093                     	;# 
   100  0094                     	;# 
   101  0098                     	;# 
   102  0099                     	;# 
   103  009C                     	;# 
   104  009D                     	;# 
   105  009E                     	;# 
   106  009F                     	;# 
   107  010C                     	;# 
   108  010D                     	;# 
   109  010E                     	;# 
   110  010F                     	;# 
   111  018C                     	;# 
   112  018D                     	;# 
   113  0000                     	;# 
   114  0001                     	;# 
   115  0002                     	;# 
   116  0003                     	;# 
   117  0004                     	;# 
   118  0005                     	;# 
   119  0006                     	;# 
   120  0007                     	;# 
   121  000A                     	;# 
   122  000B                     	;# 
   123  000C                     	;# 
   124  000D                     	;# 
   125  000E                     	;# 
   126  000E                     	;# 
   127  000F                     	;# 
   128  0010                     	;# 
   129  0011                     	;# 
   130  0012                     	;# 
   131  0013                     	;# 
   132  0014                     	;# 
   133  0015                     	;# 
   134  0015                     	;# 
   135  0016                     	;# 
   136  0017                     	;# 
   137  0018                     	;# 
   138  0019                     	;# 
   139  001A                     	;# 
   140  001B                     	;# 
   141  001B                     	;# 
   142  001C                     	;# 
   143  001D                     	;# 
   144  001E                     	;# 
   145  001F                     	;# 
   146  0081                     	;# 
   147  0085                     	;# 
   148  0086                     	;# 
   149  0087                     	;# 
   150  008C                     	;# 
   151  008D                     	;# 
   152  008E                     	;# 
   153  0091                     	;# 
   154  0092                     	;# 
   155  0093                     	;# 
   156  0094                     	;# 
   157  0098                     	;# 
   158  0099                     	;# 
   159  009C                     	;# 
   160  009D                     	;# 
   161  009E                     	;# 
   162  009F                     	;# 
   163  010C                     	;# 
   164  010D                     	;# 
   165  010E                     	;# 
   166  010F                     	;# 
   167  018C                     	;# 
   168  018D                     	;# 
   169                           
   170                           	psect	strings
   171  0003                     __pstrings:	
   172  0003                     stringtab:	
   173  0003                     __stringtab:	
   174  0003                     stringcode:	
   175                           ;	String table - string pointers are 1 byte each
   176                           
   177  0003                     stringdir:	
   178  0003  3000               	movlw	high stringdir
   179  0004  008A               	movwf	10
   180  0005  0804               	movf	4,w
   181  0006  0A84               	incf	4,f
   182  0007  0782               	addwf	2,f
   183  0008                     __stringbase:	
   184  0008  3400               	retlw	0
   185  0009                     __end_of__stringtab:	
   186  0009                     _hexpowers:	
   187  0009  3401               	retlw	1
   188  000A  3400               	retlw	0
   189  000B  3410               	retlw	16
   190  000C  3400               	retlw	0
   191  000D  3400               	retlw	0
   192  000E  3401               	retlw	1
   193  000F  3400               	retlw	0
   194  0010  3410               	retlw	16
   195  0011                     __end_of_hexpowers:	
   196  0014                     _SSPCON	set	20
   197  0018                     _RCSTA	set	24
   198  0019                     _TXREG	set	25
   199  0013                     _SSPBUF	set	19
   200  0063                     _SSPIF	set	99
   201  0093                     _SSPADD	set	147
   202  0094                     _SSPSTAT	set	148
   203  0099                     _SPBRG	set	153
   204  0098                     _TXSTA	set	152
   205  043C                     _TRISC4	set	1084
   206  043B                     _TRISC3	set	1083
   207  04C1                     _TRMT	set	1217
   208  048C                     _ACKEN	set	1164
   209  048D                     _ACKDT	set	1165
   210  048B                     _RCEN	set	1163
   211  0489                     _RSEN	set	1161
   212  048A                     _PEN	set	1162
   213  048E                     _ACKSTAT	set	1166
   214  0488                     _SEN	set	1160
   215  0011                     STR_2:	
   216  0011  3430               	retlw	48	;'0'
   217  0012  3431               	retlw	49	;'1'
   218  0013  3432               	retlw	50	;'2'
   219  0014  3433               	retlw	51	;'3'
   220  0015  3434               	retlw	52	;'4'
   221  0016  3435               	retlw	53	;'5'
   222  0017  3436               	retlw	54	;'6'
   223  0018  3437               	retlw	55	;'7'
   224  0019  3438               	retlw	56	;'8'
   225  001A  3439               	retlw	57	;'9'
   226  001B  3461               	retlw	97	;'a'
   227  001C  3462               	retlw	98	;'b'
   228  001D  3463               	retlw	99	;'c'
   229  001E  3464               	retlw	100	;'d'
   230  001F  3465               	retlw	101	;'e'
   231  0020  3466               	retlw	102	;'f'
   232  0021  3400               	retlw	0
   233  0022                     STR_1:	
   234  0022  3425               	retlw	37	;'%'
   235  0023  3478               	retlw	120	;'x'
   236  0024  343A               	retlw	58	;':'
   237  0025  3425               	retlw	37	;'%'
   238  0026  3478               	retlw	120	;'x'
   239  0027  343A               	retlw	58	;':'
   240  0028  3425               	retlw	37	;'%'
   241  0029  3478               	retlw	120	;'x'
   242  002A  340D               	retlw	13
   243  002B  340A               	retlw	10
   244  002C  3400               	retlw	0
   245                           
   246                           ; #config settings
   247  0000                     
   248                           	psect	cinit
   249  07F3                     start_initialization:	
   250  07F3                     __initialization:	
   251                           
   252                           ; Clear objects allocated to BANK0
   253  07F3  1383               	bcf	3,7	;select IRP bank0
   254  07F4  3020               	movlw	low __pbssBANK0
   255  07F5  0084               	movwf	4
   256  07F6  304B               	movlw	low (__pbssBANK0+43)
   257  07F7  120A  118A  2598  120A  118A  	fcall	clear_ram0
   258  07FC                     end_of_initialization:	
   259                           ;End of C runtime variable initialization code
   260                           
   261  07FC                     __end_of__initialization:	
   262  07FC  0183               	clrf	3
   263  07FD  120A  118A  2F2E   	ljmp	_main	;jump to C main() function
   264                           
   265                           	psect	bssBANK0
   266  0020                     __pbssBANK0:	
   267  0020                     _hour:	
   268  0020                     	ds	1
   269  0021                     _minitue:	
   270  0021                     	ds	1
   271  0022                     _second:	
   272  0022                     	ds	1
   273  0023                     _time:	
   274  0023                     	ds	40
   275                           
   276                           	psect	clrtext
   277  0598                     clear_ram0:	
   278                           ;	Called with FSR containing the base address, and
   279                           ;	W with the last address+1
   280                           
   281  0598  0064               	clrwdt	;clear the watchdog before getting into this loop
   282  0599                     clrloop0:	
   283  0599  0180               	clrf	0	;clear RAM location pointed to by FSR
   284  059A  0A84               	incf	4,f	;increment pointer
   285  059B  0604               	xorwf	4,w	;XOR with final address
   286  059C  1903               	btfsc	3,2	;have we reached the end yet?
   287  059D  3400               	retlw	0	;all done for this memory range, return
   288  059E  0604               	xorwf	4,w	;XOR again to restore value
   289  059F  2D99               	goto	clrloop0	;do the next byte
   290                           
   291                           	psect	cstackCOMMON
   292  0070                     __pcstackCOMMON:	
   293  0070                     ?_start:	
   294  0070                     ??_start:	
   295                           ; 1 bytes @ 0x0
   296                           
   297  0070                     ?_stop:	
   298                           ; 1 bytes @ 0x0
   299                           
   300  0070                     ??_stop:	
   301                           ; 1 bytes @ 0x0
   302                           
   303  0070                     ?_restart:	
   304                           ; 1 bytes @ 0x0
   305                           
   306  0070                     ??_restart:	
   307                           ; 1 bytes @ 0x0
   308                           
   309  0070                     ?_read:	
   310                           ; 1 bytes @ 0x0
   311                           
   312  0070                     ??_read:	
   313                           ; 1 bytes @ 0x0
   314                           
   315  0070                     ?_ack:	
   316                           ; 1 bytes @ 0x0
   317                           
   318  0070                     ??_ack:	
   319                           ; 1 bytes @ 0x0
   320                           
   321  0070                     ?_nack:	
   322                           ; 1 bytes @ 0x0
   323                           
   324  0070                     ??_nack:	
   325                           ; 1 bytes @ 0x0
   326                           
   327  0070                     ?_printToSerail:	
   328                           ; 1 bytes @ 0x0
   329                           
   330  0070                     ??_printToSerail:	
   331                           ; 1 bytes @ 0x0
   332                           
   333  0070                     ?_main:	
   334                           ; 1 bytes @ 0x0
   335                           
   336  0070                     ?_send:	
   337                           ; 1 bytes @ 0x0
   338                           
   339  0070                     ?___lwdiv:	
   340                           ; 2 bytes @ 0x0
   341                           
   342  0070                     ___lwdiv@divisor:	
   343                           ; 2 bytes @ 0x0
   344                           
   345                           
   346                           ; 2 bytes @ 0x0
   347  0070                     	ds	2
   348  0072                     ??_send:	
   349  0072                     printToSerail@i:	
   350                           ; 1 bytes @ 0x2
   351                           
   352  0072                     ___lwdiv@dividend:	
   353                           ; 2 bytes @ 0x2
   354                           
   355                           
   356                           ; 2 bytes @ 0x2
   357  0072                     	ds	2
   358  0074                     ??___lwdiv:	
   359  0074                     send@ch:	
   360                           ; 1 bytes @ 0x4
   361                           
   362  0074                     printToSerail@message:	
   363                           ; 1 bytes @ 0x4
   364                           
   365                           
   366                           ; 1 bytes @ 0x4
   367  0074                     	ds	1
   368  0075                     ___lwdiv@quotient:	
   369                           
   370                           ; 2 bytes @ 0x5
   371  0075                     	ds	2
   372  0077                     ___lwdiv@counter:	
   373                           
   374                           ; 1 bytes @ 0x7
   375  0077                     	ds	1
   376  0078                     ??_sprintf:	
   377                           
   378                           ; 1 bytes @ 0x8
   379  0078                     	ds	3
   380                           
   381                           	psect	cstackBANK0
   382  004B                     __pcstackBANK0:	
   383  004B                     ?_sprintf:	
   384  004B                     sprintf@f:	
   385                           ; 2 bytes @ 0x0
   386                           
   387                           
   388                           ; 1 bytes @ 0x0
   389  004B                     	ds	8
   390  0053                     sprintf@idx:	
   391                           
   392                           ; 1 bytes @ 0x8
   393  0053                     	ds	1
   394  0054                     sprintf@ap:	
   395                           
   396                           ; 1 bytes @ 0x9
   397  0054                     	ds	1
   398  0055                     sprintf@val:	
   399                           
   400                           ; 2 bytes @ 0xA
   401  0055                     	ds	2
   402  0057                     sprintf@prec:	
   403                           
   404                           ; 1 bytes @ 0xC
   405  0057                     	ds	1
   406  0058                     sprintf@sp:	
   407                           
   408                           ; 1 bytes @ 0xD
   409  0058                     	ds	1
   410  0059                     sprintf@c:	
   411                           
   412                           ; 1 bytes @ 0xE
   413  0059                     	ds	1
   414  005A                     ??_main:	
   415                           
   416                           ; 1 bytes @ 0xF
   417  005A                     	ds	7
   418                           
   419                           	psect	maintext
   420  072E                     __pmaintext:	
   421 ;;
   422 ;;Main: autosize = 0, tempsize = 7, incstack = 0, save=0
   423 ;;
   424 ;; *************** function _main *****************
   425 ;; Defined at:
   426 ;;		line 87 in file "iic.c"
   427 ;; Parameters:    Size  Location     Type
   428 ;;		None
   429 ;; Auto vars:     Size  Location     Type
   430 ;;		None
   431 ;; Return value:  Size  Location     Type
   432 ;;                  1    wreg      void 
   433 ;; Registers used:
   434 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   435 ;; Tracked objects:
   436 ;;		On entry : B00/0
   437 ;;		On exit  : 0/0
   438 ;;		Unchanged: 0/0
   439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   440 ;;      Params:         0       0       0       0       0
   441 ;;      Locals:         0       0       0       0       0
   442 ;;      Temps:          0       7       0       0       0
   443 ;;      Totals:         0       7       0       0       0
   444 ;;Total ram usage:        7 bytes
   445 ;; Hardware stack levels required when called:    2
   446 ;; This function calls:
   447 ;;		_ack
   448 ;;		_nack
   449 ;;		_printToSerail
   450 ;;		_read
   451 ;;		_restart
   452 ;;		_send
   453 ;;		_sprintf
   454 ;;		_start
   455 ;;		_stop
   456 ;; This function is called by:
   457 ;;		Startup code after reset
   458 ;; This function uses a non-reentrant model
   459 ;;
   460                           
   461                           
   462                           ;psect for function _main
   463  072E                     _main:	
   464  072E                     l1008:	
   465                           ;incstack = 0
   466                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   467                           
   468                           
   469                           ;iic.c: 91:    TXSTA = 0x24;
   470  072E  3024               	movlw	36
   471  072F  1683               	bsf	3,5	;RP0=1, select bank1
   472  0730  1303               	bcf	3,6	;RP1=0, select bank1
   473  0731  0098               	movwf	24	;volatile
   474                           
   475                           ;iic.c: 92:     RCSTA = 0x90;
   476  0732  3090               	movlw	144
   477  0733  1283               	bcf	3,5	;RP0=0, select bank0
   478  0734  1303               	bcf	3,6	;RP1=0, select bank0
   479  0735  0098               	movwf	24	;volatile
   480                           
   481                           ;iic.c: 93:     SPBRG = 25;
   482  0736  3019               	movlw	25
   483  0737  1683               	bsf	3,5	;RP0=1, select bank1
   484  0738  1303               	bcf	3,6	;RP1=0, select bank1
   485  0739  0099               	movwf	25	;volatile
   486  073A                     l1010:	
   487                           
   488                           ;iic.c: 97:     TRISC3 = 1;
   489  073A  1587               	bsf	7,3	;volatile
   490  073B                     l1012:	
   491                           
   492                           ;iic.c: 98:     TRISC4 = 1;
   493  073B  1607               	bsf	7,4	;volatile
   494                           
   495                           ;iic.c: 100:     SSPSTAT = 0x80;
   496  073C  3080               	movlw	128
   497  073D  0094               	movwf	20	;volatile
   498                           
   499                           ;iic.c: 101:     SSPCON = 0x28;
   500  073E  3028               	movlw	40
   501  073F  1283               	bcf	3,5	;RP0=0, select bank0
   502  0740  1303               	bcf	3,6	;RP1=0, select bank0
   503  0741  0094               	movwf	20	;volatile
   504                           
   505                           ;iic.c: 102:     SSPADD = 9;
   506  0742  3009               	movlw	9
   507  0743  1683               	bsf	3,5	;RP0=1, select bank1
   508  0744  1303               	bcf	3,6	;RP1=0, select bank1
   509  0745  0093               	movwf	19	;volatile
   510  0746                     l1014:	
   511                           
   512                           ;iic.c: 106:     start();
   513  0746  120A  118A  25AA  120A  118A  	fcall	_start
   514  074B                     l1018:	
   515                           ;iic.c: 107:     while (send(0xD0) == 1) {
   516                           
   517                           
   518                           ;iic.c: 107:     while (send(0xD0) == 1) {
   519  074B  30D0               	movlw	208
   520  074C  120A  118A  25DF  120A  118A  	fcall	_send
   521  0751  0370               	decf	?_send,w
   522  0752  0471               	iorwf	?_send+1,w
   523  0753  1903               	btfsc	3,2
   524  0754  2F56               	goto	u451
   525  0755  2F57               	goto	u450
   526  0756                     u451:	
   527  0756  2F46               	goto	l1014
   528  0757                     u450:	
   529  0757                     l1020:	
   530                           
   531                           ;iic.c: 110:     send(0x00);
   532  0757  3000               	movlw	0
   533  0758  120A  118A  25DF  120A  118A  	fcall	_send
   534                           
   535                           ;iic.c: 112:     send(0x58);
   536  075D  3058               	movlw	88
   537  075E  120A  118A  25DF  120A  118A  	fcall	_send
   538                           
   539                           ;iic.c: 114:     send(0x59);
   540  0763  3059               	movlw	89
   541  0764  120A  118A  25DF  120A  118A  	fcall	_send
   542                           
   543                           ;iic.c: 115:     send(0x06);
   544  0769  3006               	movlw	6
   545  076A  120A  118A  25DF  120A  118A  	fcall	_send
   546  076F                     l1022:	
   547                           
   548                           ;iic.c: 117:     stop();
   549  076F  120A  118A  25B4  120A  118A  	fcall	_stop
   550  0774                     l1024:	
   551                           
   552                           ;iic.c: 120:         start();
   553  0774  120A  118A  25AA  120A  118A  	fcall	_start
   554  0779                     l1028:	
   555                           ;iic.c: 121:         while (send(0xD0) == 1) {
   556                           
   557                           
   558                           ;iic.c: 121:         while (send(0xD0) == 1) {
   559  0779  30D0               	movlw	208
   560  077A  120A  118A  25DF  120A  118A  	fcall	_send
   561  077F  0370               	decf	?_send,w
   562  0780  0471               	iorwf	?_send+1,w
   563  0781  1903               	btfsc	3,2
   564  0782  2F84               	goto	u461
   565  0783  2F85               	goto	u460
   566  0784                     u461:	
   567  0784  2F74               	goto	l1024
   568  0785                     u460:	
   569  0785                     l1030:	
   570                           
   571                           ;iic.c: 124:         send(0x00);
   572  0785  3000               	movlw	0
   573  0786  120A  118A  25DF  120A  118A  	fcall	_send
   574  078B                     l1032:	
   575                           
   576                           ;iic.c: 125:         restart();
   577  078B  120A  118A  25A0  120A  118A  	fcall	_restart
   578  0790                     l1034:	
   579                           
   580                           ;iic.c: 126:         send(0xD1);
   581  0790  30D1               	movlw	209
   582  0791  120A  118A  25DF  120A  118A  	fcall	_send
   583  0796                     l1036:	
   584                           
   585                           ;iic.c: 127:         second = read();
   586  0796  120A  118A  25D4  120A  118A  	fcall	_read
   587  079B  1283               	bcf	3,5	;RP0=0, select bank0
   588  079C  1303               	bcf	3,6	;RP1=0, select bank0
   589  079D  00DA               	movwf	??_main
   590  079E  085A               	movf	??_main,w
   591  079F  00A2               	movwf	_second
   592  07A0                     l1038:	
   593                           
   594                           ;iic.c: 128:         ack();
   595  07A0  120A  118A  25BE  120A  118A  	fcall	_ack
   596                           
   597                           ;iic.c: 129:         minitue = read();
   598  07A5  120A  118A  25D4  120A  118A  	fcall	_read
   599  07AA  1283               	bcf	3,5	;RP0=0, select bank0
   600  07AB  1303               	bcf	3,6	;RP1=0, select bank0
   601  07AC  00DA               	movwf	??_main
   602  07AD  085A               	movf	??_main,w
   603  07AE  00A1               	movwf	_minitue
   604  07AF                     l1040:	
   605                           
   606                           ;iic.c: 130:         ack();
   607  07AF  120A  118A  25BE  120A  118A  	fcall	_ack
   608  07B4                     l1042:	
   609                           
   610                           ;iic.c: 131:         hour = read();
   611  07B4  120A  118A  25D4  120A  118A  	fcall	_read
   612  07B9  1283               	bcf	3,5	;RP0=0, select bank0
   613  07BA  1303               	bcf	3,6	;RP1=0, select bank0
   614  07BB  00DA               	movwf	??_main
   615  07BC  085A               	movf	??_main,w
   616  07BD  00A0               	movwf	_hour
   617                           
   618                           ;iic.c: 132:         nack();
   619  07BE  120A  118A  25C9  120A  118A  	fcall	_nack
   620                           
   621                           ;iic.c: 133:         stop();
   622  07C3  120A  118A  25B4  120A  118A  	fcall	_stop
   623  07C8                     l1044:	
   624                           
   625                           ;iic.c: 134:         sprintf(time, "%x:%x:%x\r\n", hour, minitue, second);
   626  07C8  301A               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   627  07C9  1283               	bcf	3,5	;RP0=0, select bank0
   628  07CA  1303               	bcf	3,6	;RP1=0, select bank0
   629  07CB  00DA               	movwf	??_main
   630  07CC  085A               	movf	??_main,w
   631  07CD  00CB               	movwf	sprintf@f
   632  07CE  0820               	movf	_hour,w
   633  07CF  00DB               	movwf	??_main+1
   634  07D0  01DC               	clrf	??_main+2
   635  07D1  085B               	movf	??_main+1,w
   636  07D2  00CC               	movwf	?_sprintf+1
   637  07D3  085C               	movf	??_main+2,w
   638  07D4  00CD               	movwf	?_sprintf+2
   639  07D5  0821               	movf	_minitue,w
   640  07D6  00DD               	movwf	??_main+3
   641  07D7  01DE               	clrf	??_main+4
   642  07D8  085D               	movf	??_main+3,w
   643  07D9  00CE               	movwf	?_sprintf+3
   644  07DA  085E               	movf	??_main+4,w
   645  07DB  00CF               	movwf	?_sprintf+4
   646  07DC  0822               	movf	_second,w
   647  07DD  00DF               	movwf	??_main+5
   648  07DE  01E0               	clrf	??_main+6
   649  07DF  085F               	movf	??_main+5,w
   650  07E0  00D0               	movwf	?_sprintf+5
   651  07E1  0860               	movf	??_main+6,w
   652  07E2  00D1               	movwf	?_sprintf+6
   653  07E3  3023               	movlw	(low (_time| 0))& (0+255)
   654  07E4  120A  118A  266A  120A  118A  	fcall	_sprintf
   655  07E9                     l1046:	
   656                           
   657                           ;iic.c: 135:         printToSerail(time);
   658  07E9  3023               	movlw	(low (_time| 0))& (0+255)
   659  07EA  120A  118A  25F8  120A  118A  	fcall	_printToSerail
   660  07EF  2F74               	goto	l1024
   661  07F0  120A  118A  2800   	ljmp	start
   662  07F3                     __end_of_main:	
   663                           
   664                           	psect	text1
   665  05B4                     __ptext1:	
   666 ;; *************** function _stop *****************
   667 ;; Defined at:
   668 ;;		line 40 in file "iic.c"
   669 ;; Parameters:    Size  Location     Type
   670 ;;		None
   671 ;; Auto vars:     Size  Location     Type
   672 ;;		None
   673 ;; Return value:  Size  Location     Type
   674 ;;                  1    wreg      void 
   675 ;; Registers used:
   676 ;;		None
   677 ;; Tracked objects:
   678 ;;		On entry : 0/0
   679 ;;		On exit  : 0/0
   680 ;;		Unchanged: 0/0
   681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   682 ;;      Params:         0       0       0       0       0
   683 ;;      Locals:         0       0       0       0       0
   684 ;;      Temps:          0       0       0       0       0
   685 ;;      Totals:         0       0       0       0       0
   686 ;;Total ram usage:        0 bytes
   687 ;; Hardware stack levels used:    1
   688 ;; This function calls:
   689 ;;		Nothing
   690 ;; This function is called by:
   691 ;;		_main
   692 ;; This function uses a non-reentrant model
   693 ;;
   694                           
   695                           
   696                           ;psect for function _stop
   697  05B4                     _stop:	
   698  05B4                     l934:	
   699                           ;incstack = 0
   700                           ; Regs used in _stop: []
   701                           
   702                           
   703                           ;iic.c: 41:     PEN = 1;
   704  05B4  1683               	bsf	3,5	;RP0=1, select bank1
   705  05B5  1303               	bcf	3,6	;RP1=0, select bank1
   706  05B6  1511               	bsf	17,2	;volatile
   707  05B7                     l65:	
   708                           ;iic.c: 42:     while (SSPIF == 0);
   709                           
   710  05B7  1283               	bcf	3,5	;RP0=0, select bank0
   711  05B8  1D8C               	btfss	12,3	;volatile
   712  05B9  2DBB               	goto	u331
   713  05BA  2DBC               	goto	u330
   714  05BB                     u331:	
   715  05BB  2DB7               	goto	l65
   716  05BC                     u330:	
   717  05BC                     l67:	
   718                           
   719                           ;iic.c: 43:     SSPIF = 0;
   720  05BC  118C               	bcf	12,3	;volatile
   721  05BD                     l68:	
   722  05BD  0008               	return
   723  05BE                     __end_of_stop:	
   724                           
   725                           	psect	text2
   726  05AA                     __ptext2:	
   727 ;; *************** function _start *****************
   728 ;; Defined at:
   729 ;;		line 26 in file "iic.c"
   730 ;; Parameters:    Size  Location     Type
   731 ;;		None
   732 ;; Auto vars:     Size  Location     Type
   733 ;;		None
   734 ;; Return value:  Size  Location     Type
   735 ;;                  1    wreg      void 
   736 ;; Registers used:
   737 ;;		None
   738 ;; Tracked objects:
   739 ;;		On entry : 0/0
   740 ;;		On exit  : 0/0
   741 ;;		Unchanged: 0/0
   742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   743 ;;      Params:         0       0       0       0       0
   744 ;;      Locals:         0       0       0       0       0
   745 ;;      Temps:          0       0       0       0       0
   746 ;;      Totals:         0       0       0       0       0
   747 ;;Total ram usage:        0 bytes
   748 ;; Hardware stack levels used:    1
   749 ;; This function calls:
   750 ;;		Nothing
   751 ;; This function is called by:
   752 ;;		_main
   753 ;; This function uses a non-reentrant model
   754 ;;
   755                           
   756                           
   757                           ;psect for function _start
   758  05AA                     _start:	
   759  05AA                     l926:	
   760                           ;incstack = 0
   761                           ; Regs used in _start: []
   762                           
   763                           
   764                           ;iic.c: 27:     SEN = 1;
   765  05AA  1683               	bsf	3,5	;RP0=1, select bank1
   766  05AB  1303               	bcf	3,6	;RP1=0, select bank1
   767  05AC  1411               	bsf	17,0	;volatile
   768  05AD                     l53:	
   769                           ;iic.c: 28:     while (SSPIF == 0);
   770                           
   771  05AD  1283               	bcf	3,5	;RP0=0, select bank0
   772  05AE  1D8C               	btfss	12,3	;volatile
   773  05AF  2DB1               	goto	u311
   774  05B0  2DB2               	goto	u310
   775  05B1                     u311:	
   776  05B1  2DAD               	goto	l53
   777  05B2                     u310:	
   778  05B2                     l55:	
   779                           
   780                           ;iic.c: 29:     SSPIF = 0;
   781  05B2  118C               	bcf	12,3	;volatile
   782  05B3                     l56:	
   783  05B3  0008               	return
   784  05B4                     __end_of_start:	
   785                           
   786                           	psect	text3
   787  066A                     __ptext3:	
   788 ;; *************** function _sprintf *****************
   789 ;; Defined at:
   790 ;;		line 505 in file "D:\pic\sources\c90\common\doprnt.c"
   791 ;; Parameters:    Size  Location     Type
   792 ;;  sp              1    wreg     PTR unsigned char 
   793 ;;		 -> time(40), 
   794 ;;  f               1    0[BANK0 ] PTR const unsigned char 
   795 ;;		 -> STR_1(11), 
   796 ;; Auto vars:     Size  Location     Type
   797 ;;  sp              1   13[BANK0 ] PTR unsigned char 
   798 ;;		 -> time(40), 
   799 ;;  idx             1    8[BANK0 ] unsigned char 
   800 ;;  tmpval          4    0        struct .
   801 ;;  val             2   10[BANK0 ] unsigned int 
   802 ;;  cp              2    0        PTR const unsigned char 
   803 ;;  len             2    0        unsigned int 
   804 ;;  c               1   14[BANK0 ] unsigned char 
   805 ;;  prec            1   12[BANK0 ] char 
   806 ;;  ap              1    9[BANK0 ] PTR void [1]
   807 ;;		 -> ?_sprintf(2), 
   808 ;;  flag            1    0        unsigned char 
   809 ;; Return value:  Size  Location     Type
   810 ;;                  2    0[BANK0 ] int 
   811 ;; Registers used:
   812 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   813 ;; Tracked objects:
   814 ;;		On entry : 0/0
   815 ;;		On exit  : 0/0
   816 ;;		Unchanged: 0/0
   817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   818 ;;      Params:         0       7       0       0       0
   819 ;;      Locals:         0       8       0       0       0
   820 ;;      Temps:          3       0       0       0       0
   821 ;;      Totals:         3      15       0       0       0
   822 ;;Total ram usage:       18 bytes
   823 ;; Hardware stack levels used:    1
   824 ;; Hardware stack levels required when called:    1
   825 ;; This function calls:
   826 ;;		___lwdiv
   827 ;; This function is called by:
   828 ;;		_main
   829 ;; This function uses a non-reentrant model
   830 ;;
   831                           
   832                           
   833                           ;psect for function _sprintf
   834  066A                     _sprintf:	
   835                           
   836                           ;incstack = 0
   837                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   838                           ;sprintf@sp stored from wreg
   839  066A  1283               	bcf	3,5	;RP0=0, select bank0
   840  066B  1303               	bcf	3,6	;RP1=0, select bank0
   841  066C  00D8               	movwf	sprintf@sp
   842  066D                     l956:	
   843                           
   844                           ;D:\pic\sources\c90\common\doprnt.c: 505: sprintf(char * sp, const char * f, ...);D:\pic
      +                          \sources\c90\common\doprnt.c: 506: {;D:\pic\sources\c90\common\doprnt.c: 507:  va_list a
      +                          p;;D:\pic\sources\c90\common\doprnt.c: 512:  char c;;D:\pic\sources\c90\common\doprnt.c:
      +                           521:  signed char prec;;D:\pic\sources\c90\common\doprnt.c: 525:  unsigned char flag;;D
      +                          :\pic\sources\c90\common\doprnt.c: 543:  } tmpval;;D:\pic\sources\c90\common\doprnt.c: 5
      +                          45:  unsigned int val;;D:\pic\sources\c90\common\doprnt.c: 546:  unsigned len;
   845  066D  304C               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
   846  066E  00F8               	movwf	??_sprintf
   847  066F  0878               	movf	??_sprintf,w
   848  0670  00D4               	movwf	sprintf@ap
   849                           
   850                           ;D:\pic\sources\c90\common\doprnt.c: 553:  while((c = *f++)) {
   851  0671  2F17               	goto	l998
   852  0672                     l958:	
   853                           
   854                           ;D:\pic\sources\c90\common\doprnt.c: 555:   if(c != '%')
   855  0672  3025               	movlw	37
   856  0673  0659               	xorwf	sprintf@c,w
   857  0674  1903               	btfsc	3,2
   858  0675  2E77               	goto	u401
   859  0676  2E78               	goto	u400
   860  0677                     u401:	
   861  0677  2E84               	goto	l964
   862  0678                     u400:	
   863  0678                     l960:	
   864                           
   865                           ;D:\pic\sources\c90\common\doprnt.c: 557:   {;D:\pic\sources\c90\common\doprnt.c: 558:  
      +                            ((*sp++ = (c)));
   866  0678  0859               	movf	sprintf@c,w
   867  0679  00F8               	movwf	??_sprintf
   868  067A  0858               	movf	sprintf@sp,w
   869  067B  0084               	movwf	4
   870  067C  0878               	movf	??_sprintf,w
   871  067D  1383               	bcf	3,7	;select IRP bank0
   872  067E  0080               	movwf	0
   873  067F                     l962:	
   874  067F  3001               	movlw	1
   875  0680  00F8               	movwf	??_sprintf
   876  0681  0878               	movf	??_sprintf,w
   877  0682  07D8               	addwf	sprintf@sp,f
   878                           
   879                           ;D:\pic\sources\c90\common\doprnt.c: 559:    continue;
   880  0683  2F17               	goto	l998
   881  0684                     l964:	
   882  0684                     l968:	
   883                           ;D:\pic\sources\c90\common\doprnt.c: 661:   switch(c = *f++) {
   884                           
   885  0684  3001               	movlw	1
   886  0685  07CB               	addwf	sprintf@f,f
   887  0686  30FF               	movlw	-1
   888  0687  074B               	addwf	sprintf@f,w
   889  0688  0084               	movwf	4
   890  0689  120A  118A  2003  120A  118A  	fcall	stringdir
   891  068E  00D9               	movwf	sprintf@c
   892  068F  00F8               	movwf	??_sprintf
   893  0690  01F9               	clrf	??_sprintf+1
   894                           
   895                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   896                           ; Switch size 1, requested type "simple"
   897                           ; Number of cases is 1, Range of values is 0 to 0
   898                           ; switch strategies available:
   899                           ; Name         Instructions Cycles
   900                           ; simple_byte            4     3 (average)
   901                           ; direct_byte           11     8 (fixed)
   902                           ; jumptable            260     6 (fixed)
   903                           ;	Chosen strategy is simple_byte
   904  0691  0879               	movf	??_sprintf+1,w
   905  0692  3A00               	xorlw	0	; case 0
   906  0693  1903               	skipnz
   907  0694  2E96               	goto	l1068
   908  0695  2F17               	goto	l998
   909  0696                     l1068:	
   910                           
   911                           ; Switch size 1, requested type "simple"
   912                           ; Number of cases is 2, Range of values is 0 to 120
   913                           ; switch strategies available:
   914                           ; Name         Instructions Cycles
   915                           ; simple_byte            7     4 (average)
   916                           ; jumptable            260     6 (fixed)
   917                           ;	Chosen strategy is simple_byte
   918  0696  0878               	movf	??_sprintf,w
   919  0697  3A00               	xorlw	0	; case 0
   920  0698  1903               	skipnz
   921  0699  2F29               	goto	l1000
   922  069A  3A78               	xorlw	120	; case 120
   923  069B  1903               	skipnz
   924  069C  2E9E               	goto	l970
   925  069D  2F17               	goto	l998
   926  069E                     l970:	
   927                           
   928                           ;D:\pic\sources\c90\common\doprnt.c: 1299:   {;D:\pic\sources\c90\common\doprnt.c: 1312:
      +                               val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
   929  069E  0854               	movf	sprintf@ap,w
   930  069F  0084               	movwf	4
   931  06A0  1383               	bcf	3,7	;select IRP bank0
   932  06A1  0800               	movf	0,w
   933  06A2  00D5               	movwf	sprintf@val
   934  06A3  0A84               	incf	4,f
   935  06A4  0800               	movf	0,w
   936  06A5  00D6               	movwf	sprintf@val+1
   937  06A6                     l972:	
   938  06A6  3002               	movlw	2
   939  06A7  00F8               	movwf	??_sprintf
   940  06A8  0878               	movf	??_sprintf,w
   941  06A9  07D4               	addwf	sprintf@ap,f
   942  06AA                     l974:	
   943                           
   944                           ;D:\pic\sources\c90\common\doprnt.c: 1313:   };D:\pic\sources\c90\common\doprnt.c: 1342:
      +                              for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
   945  06AA  01D9               	clrf	sprintf@c
   946  06AB  0AD9               	incf	sprintf@c,f
   947  06AC                     l980:	
   948                           
   949                           ;D:\pic\sources\c90\common\doprnt.c: 1343:     if(val < hexpowers[c])
   950  06AC  0859               	movf	sprintf@c,w
   951  06AD  00F8               	movwf	??_sprintf
   952  06AE  0778               	addwf	??_sprintf,w
   953  06AF  3E01               	addlw	low ((_hexpowers-__stringbase)| (0+32768))
   954  06B0  0084               	movwf	4
   955  06B1  120A  118A  2003  120A  118A  	fcall	stringdir
   956  06B6  00F9               	movwf	??_sprintf+1
   957  06B7  120A  118A  2003  120A  118A  	fcall	stringdir
   958  06BC  00FA               	movwf	??_sprintf+2
   959  06BD  087A               	movf	??_sprintf+2,w
   960  06BE  0256               	subwf	sprintf@val+1,w
   961  06BF  1D03               	skipz
   962  06C0  2EC3               	goto	u415
   963  06C1  0879               	movf	??_sprintf+1,w
   964  06C2  0255               	subwf	sprintf@val,w
   965  06C3                     u415:	
   966  06C3  1803               	skipnc
   967  06C4  2EC6               	goto	u411
   968  06C5  2EC7               	goto	u410
   969  06C6                     u411:	
   970  06C6  2EC8               	goto	l984
   971  06C7                     u410:	
   972  06C7  2ED2               	goto	l986
   973  06C8                     l984:	
   974  06C8  3001               	movlw	1
   975  06C9  00F8               	movwf	??_sprintf
   976  06CA  0878               	movf	??_sprintf,w
   977  06CB  07D9               	addwf	sprintf@c,f
   978  06CC  3004               	movlw	4
   979  06CD  0659               	xorwf	sprintf@c,w
   980  06CE  1D03               	btfss	3,2
   981  06CF  2ED1               	goto	u421
   982  06D0  2ED2               	goto	u420
   983  06D1                     u421:	
   984  06D1  2EAC               	goto	l980
   985  06D2                     u420:	
   986  06D2                     l986:	
   987                           
   988                           ;D:\pic\sources\c90\common\doprnt.c: 1448:   {;D:\pic\sources\c90\common\doprnt.c: 1495:
      +                             };D:\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
   989  06D2  0859               	movf	sprintf@c,w
   990  06D3  00F8               	movwf	??_sprintf
   991  06D4  0878               	movf	??_sprintf,w
   992  06D5  00D7               	movwf	sprintf@prec
   993                           
   994                           ;D:\pic\sources\c90\common\doprnt.c: 1500:   while(prec--) {
   995  06D6  2F0E               	goto	l996
   996  06D7                     l988:	
   997                           
   998                           ;D:\pic\sources\c90\common\doprnt.c: 1504:    {;D:\pic\sources\c90\common\doprnt.c: 1525
      +                          :    {;D:\pic\sources\c90\common\doprnt.c: 1526:     unsigned char idx = (val / hexpower
      +                          s[(unsigned char)prec]) & 0xF;
   999  06D7  0857               	movf	sprintf@prec,w
  1000  06D8  00F8               	movwf	??_sprintf
  1001  06D9  0778               	addwf	??_sprintf,w
  1002  06DA  3E01               	addlw	low ((_hexpowers-__stringbase)| (0+32768))
  1003  06DB  0084               	movwf	4
  1004  06DC  120A  118A  2003  120A  118A  	fcall	stringdir
  1005  06E1  00F0               	movwf	___lwdiv@divisor
  1006  06E2  120A  118A  2003  120A  118A  	fcall	stringdir
  1007  06E7  00F1               	movwf	___lwdiv@divisor+1
  1008  06E8  0856               	movf	sprintf@val+1,w
  1009  06E9  00F3               	movwf	___lwdiv@dividend+1
  1010  06EA  0855               	movf	sprintf@val,w
  1011  06EB  00F2               	movwf	___lwdiv@dividend
  1012  06EC  120A  118A  2626  120A  118A  	fcall	___lwdiv
  1013  06F1  0870               	movf	?___lwdiv,w
  1014  06F2  390F               	andlw	15
  1015  06F3  00F9               	movwf	??_sprintf+1
  1016  06F4  0879               	movf	??_sprintf+1,w
  1017  06F5  1283               	bcf	3,5	;RP0=0, select bank0
  1018  06F6  1303               	bcf	3,6	;RP1=0, select bank0
  1019  06F7  00D3               	movwf	sprintf@idx
  1020  06F8                     l990:	
  1021                           
  1022                           ;D:\pic\sources\c90\common\doprnt.c: 1532:     c = "0123456789abcdef"[idx];
  1023  06F8  0853               	movf	sprintf@idx,w
  1024  06F9  3E09               	addlw	low ((STR_2-__stringbase)| (0+32768))
  1025  06FA  0084               	movwf	4
  1026  06FB  120A  118A  2003  120A  118A  	fcall	stringdir
  1027  0700  00F8               	movwf	??_sprintf
  1028  0701  0878               	movf	??_sprintf,w
  1029  0702  00D9               	movwf	sprintf@c
  1030  0703                     l992:	
  1031                           
  1032                           ;D:\pic\sources\c90\common\doprnt.c: 1534:    };D:\pic\sources\c90\common\doprnt.c: 1549
      +                          :    };D:\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)));
  1033  0703  0859               	movf	sprintf@c,w
  1034  0704  00F8               	movwf	??_sprintf
  1035  0705  0858               	movf	sprintf@sp,w
  1036  0706  0084               	movwf	4
  1037  0707  0878               	movf	??_sprintf,w
  1038  0708  1383               	bcf	3,7	;select IRP bank0
  1039  0709  0080               	movwf	0
  1040  070A                     l994:	
  1041  070A  3001               	movlw	1
  1042  070B  00F8               	movwf	??_sprintf
  1043  070C  0878               	movf	??_sprintf,w
  1044  070D  07D8               	addwf	sprintf@sp,f
  1045  070E                     l996:	
  1046                           
  1047                           ;D:\pic\sources\c90\common\doprnt.c: 1500:   while(prec--) {
  1048  070E  30FF               	movlw	255
  1049  070F  00F8               	movwf	??_sprintf
  1050  0710  0878               	movf	??_sprintf,w
  1051  0711  07D7               	addwf	sprintf@prec,f
  1052  0712  0A57               	incf	sprintf@prec,w
  1053  0713  1D03               	btfss	3,2
  1054  0714  2F16               	goto	u431
  1055  0715  2F17               	goto	u430
  1056  0716                     u431:	
  1057  0716  2ED7               	goto	l988
  1058  0717                     u430:	
  1059  0717                     l998:	
  1060                           
  1061                           ;D:\pic\sources\c90\common\doprnt.c: 553:  while((c = *f++)) {
  1062  0717  3001               	movlw	1
  1063  0718  07CB               	addwf	sprintf@f,f
  1064  0719  30FF               	movlw	-1
  1065  071A  074B               	addwf	sprintf@f,w
  1066  071B  0084               	movwf	4
  1067  071C  120A  118A  2003  120A  118A  	fcall	stringdir
  1068  0721  00F8               	movwf	??_sprintf
  1069  0722  0878               	movf	??_sprintf,w
  1070  0723  00D9               	movwf	sprintf@c
  1071  0724  0859               	movf	sprintf@c,w
  1072  0725  1D03               	btfss	3,2
  1073  0726  2F28               	goto	u441
  1074  0727  2F29               	goto	u440
  1075  0728                     u441:	
  1076  0728  2E72               	goto	l958
  1077  0729                     u440:	
  1078  0729                     l1000:	
  1079                           
  1080                           ;D:\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  1081  0729  0858               	movf	sprintf@sp,w
  1082  072A  0084               	movwf	4
  1083  072B  1383               	bcf	3,7	;select IRP bank0
  1084  072C  0180               	clrf	0
  1085  072D                     l222:	
  1086  072D  0008               	return
  1087  072E                     __end_of_sprintf:	
  1088                           
  1089                           	psect	text4
  1090  0626                     __ptext4:	
  1091 ;; *************** function ___lwdiv *****************
  1092 ;; Defined at:
  1093 ;;		line 5 in file "D:\pic\sources\c90\common\lwdiv.c"
  1094 ;; Parameters:    Size  Location     Type
  1095 ;;  divisor         2    0[COMMON] unsigned int 
  1096 ;;  dividend        2    2[COMMON] unsigned int 
  1097 ;; Auto vars:     Size  Location     Type
  1098 ;;  quotient        2    5[COMMON] unsigned int 
  1099 ;;  counter         1    7[COMMON] unsigned char 
  1100 ;; Return value:  Size  Location     Type
  1101 ;;                  2    0[COMMON] unsigned int 
  1102 ;; Registers used:
  1103 ;;		wreg, status,2, status,0
  1104 ;; Tracked objects:
  1105 ;;		On entry : 0/0
  1106 ;;		On exit  : 0/0
  1107 ;;		Unchanged: 0/0
  1108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1109 ;;      Params:         4       0       0       0       0
  1110 ;;      Locals:         3       0       0       0       0
  1111 ;;      Temps:          1       0       0       0       0
  1112 ;;      Totals:         8       0       0       0       0
  1113 ;;Total ram usage:        8 bytes
  1114 ;; Hardware stack levels used:    1
  1115 ;; This function calls:
  1116 ;;		Nothing
  1117 ;; This function is called by:
  1118 ;;		_sprintf
  1119 ;; This function uses a non-reentrant model
  1120 ;;
  1121                           
  1122                           
  1123                           ;psect for function ___lwdiv
  1124  0626                     ___lwdiv:	
  1125  0626                     l900:	
  1126                           ;incstack = 0
  1127                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1128                           
  1129  0626  01F5               	clrf	___lwdiv@quotient
  1130  0627  01F6               	clrf	___lwdiv@quotient+1
  1131  0628                     l902:	
  1132  0628  0870               	movf	___lwdiv@divisor,w
  1133  0629  0471               	iorwf	___lwdiv@divisor+1,w
  1134  062A  1903               	btfsc	3,2
  1135  062B  2E2D               	goto	u241
  1136  062C  2E2E               	goto	u240
  1137  062D                     u241:	
  1138  062D  2E65               	goto	l922
  1139  062E                     u240:	
  1140  062E                     l904:	
  1141  062E  01F7               	clrf	___lwdiv@counter
  1142  062F  0AF7               	incf	___lwdiv@counter,f
  1143  0630  2E3C               	goto	l910
  1144  0631                     l906:	
  1145  0631  3001               	movlw	1
  1146  0632                     u255:	
  1147  0632  1003               	clrc
  1148  0633  0DF0               	rlf	___lwdiv@divisor,f
  1149  0634  0DF1               	rlf	___lwdiv@divisor+1,f
  1150  0635  3EFF               	addlw	-1
  1151  0636  1D03               	skipz
  1152  0637  2E32               	goto	u255
  1153  0638                     l908:	
  1154  0638  3001               	movlw	1
  1155  0639  00F4               	movwf	??___lwdiv
  1156  063A  0874               	movf	??___lwdiv,w
  1157  063B  07F7               	addwf	___lwdiv@counter,f
  1158  063C                     l910:	
  1159  063C  1FF1               	btfss	___lwdiv@divisor+1,7
  1160  063D  2E3F               	goto	u261
  1161  063E  2E40               	goto	u260
  1162  063F                     u261:	
  1163  063F  2E31               	goto	l906
  1164  0640                     u260:	
  1165  0640                     l912:	
  1166  0640  3001               	movlw	1
  1167  0641                     u275:	
  1168  0641  1003               	clrc
  1169  0642  0DF5               	rlf	___lwdiv@quotient,f
  1170  0643  0DF6               	rlf	___lwdiv@quotient+1,f
  1171  0644  3EFF               	addlw	-1
  1172  0645  1D03               	skipz
  1173  0646  2E41               	goto	u275
  1174  0647  0871               	movf	___lwdiv@divisor+1,w
  1175  0648  0273               	subwf	___lwdiv@dividend+1,w
  1176  0649  1D03               	skipz
  1177  064A  2E4D               	goto	u285
  1178  064B  0870               	movf	___lwdiv@divisor,w
  1179  064C  0272               	subwf	___lwdiv@dividend,w
  1180  064D                     u285:	
  1181  064D  1C03               	skipc
  1182  064E  2E50               	goto	u281
  1183  064F  2E51               	goto	u280
  1184  0650                     u281:	
  1185  0650  2E58               	goto	l918
  1186  0651                     u280:	
  1187  0651                     l914:	
  1188  0651  0870               	movf	___lwdiv@divisor,w
  1189  0652  02F2               	subwf	___lwdiv@dividend,f
  1190  0653  0871               	movf	___lwdiv@divisor+1,w
  1191  0654  1C03               	skipc
  1192  0655  03F3               	decf	___lwdiv@dividend+1,f
  1193  0656  02F3               	subwf	___lwdiv@dividend+1,f
  1194  0657                     l916:	
  1195  0657  1475               	bsf	___lwdiv@quotient,0
  1196  0658                     l918:	
  1197  0658  3001               	movlw	1
  1198  0659                     u295:	
  1199  0659  1003               	clrc
  1200  065A  0CF1               	rrf	___lwdiv@divisor+1,f
  1201  065B  0CF0               	rrf	___lwdiv@divisor,f
  1202  065C  3EFF               	addlw	-1
  1203  065D  1D03               	skipz
  1204  065E  2E59               	goto	u295
  1205  065F                     l920:	
  1206  065F  3001               	movlw	1
  1207  0660  02F7               	subwf	___lwdiv@counter,f
  1208  0661  1D03               	btfss	3,2
  1209  0662  2E64               	goto	u301
  1210  0663  2E65               	goto	u300
  1211  0664                     u301:	
  1212  0664  2E40               	goto	l912
  1213  0665                     u300:	
  1214  0665                     l922:	
  1215  0665  0876               	movf	___lwdiv@quotient+1,w
  1216  0666  00F1               	movwf	?___lwdiv+1
  1217  0667  0875               	movf	___lwdiv@quotient,w
  1218  0668  00F0               	movwf	?___lwdiv
  1219  0669                     l498:	
  1220  0669  0008               	return
  1221  066A                     __end_of___lwdiv:	
  1222                           
  1223                           	psect	text5
  1224  05DF                     __ptext5:	
  1225 ;; *************** function _send *****************
  1226 ;; Defined at:
  1227 ;;		line 32 in file "iic.c"
  1228 ;; Parameters:    Size  Location     Type
  1229 ;;  ch              1    wreg     unsigned char 
  1230 ;; Auto vars:     Size  Location     Type
  1231 ;;  ch              1    4[COMMON] unsigned char 
  1232 ;; Return value:  Size  Location     Type
  1233 ;;                  2    0[COMMON] int 
  1234 ;; Registers used:
  1235 ;;		wreg, status,0
  1236 ;; Tracked objects:
  1237 ;;		On entry : 0/0
  1238 ;;		On exit  : 0/0
  1239 ;;		Unchanged: 0/0
  1240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1241 ;;      Params:         2       0       0       0       0
  1242 ;;      Locals:         1       0       0       0       0
  1243 ;;      Temps:          2       0       0       0       0
  1244 ;;      Totals:         5       0       0       0       0
  1245 ;;Total ram usage:        5 bytes
  1246 ;; Hardware stack levels used:    1
  1247 ;; This function calls:
  1248 ;;		Nothing
  1249 ;; This function is called by:
  1250 ;;		_main
  1251 ;; This function uses a non-reentrant model
  1252 ;;
  1253                           
  1254                           
  1255                           ;psect for function _send
  1256  05DF                     _send:	
  1257                           
  1258                           ;incstack = 0
  1259                           ; Regs used in _send: [wreg+status,0]
  1260                           ;send@ch stored from wreg
  1261  05DF  00F4               	movwf	send@ch
  1262  05E0                     l928:	
  1263                           
  1264                           ;iic.c: 33:     SSPBUF = ch;
  1265  05E0  0874               	movf	send@ch,w
  1266  05E1  1283               	bcf	3,5	;RP0=0, select bank0
  1267  05E2  1303               	bcf	3,6	;RP1=0, select bank0
  1268  05E3  0093               	movwf	19	;volatile
  1269  05E4                     l59:	
  1270                           ;iic.c: 34:     while (SSPIF == 0);
  1271                           
  1272  05E4  1D8C               	btfss	12,3	;volatile
  1273  05E5  2DE7               	goto	u321
  1274  05E6  2DE8               	goto	u320
  1275  05E7                     u321:	
  1276  05E7  2DE4               	goto	l59
  1277  05E8                     u320:	
  1278  05E8                     l61:	
  1279                           
  1280                           ;iic.c: 35:     SSPIF = 0;
  1281  05E8  118C               	bcf	12,3	;volatile
  1282  05E9                     l930:	
  1283                           
  1284                           ;iic.c: 36:     return (ACKSTAT);
  1285  05E9  1003               	clrc
  1286  05EA  1683               	bsf	3,5	;RP0=1, select bank1
  1287  05EB  1303               	bcf	3,6	;RP1=0, select bank1
  1288  05EC  1B11               	btfsc	17,6	;volatile
  1289  05ED  1403               	setc
  1290  05EE  3000               	movlw	0
  1291  05EF  1803               	skipnc
  1292  05F0  3001               	movlw	1
  1293  05F1  00F2               	movwf	??_send
  1294  05F2  01F3               	clrf	??_send+1
  1295  05F3  0872               	movf	??_send,w
  1296  05F4  00F0               	movwf	?_send
  1297  05F5  0873               	movf	??_send+1,w
  1298  05F6  00F1               	movwf	?_send+1
  1299  05F7                     l62:	
  1300  05F7  0008               	return
  1301  05F8                     __end_of_send:	
  1302                           
  1303                           	psect	text6
  1304  05A0                     __ptext6:	
  1305 ;; *************** function _restart *****************
  1306 ;; Defined at:
  1307 ;;		line 46 in file "iic.c"
  1308 ;; Parameters:    Size  Location     Type
  1309 ;;		None
  1310 ;; Auto vars:     Size  Location     Type
  1311 ;;		None
  1312 ;; Return value:  Size  Location     Type
  1313 ;;                  1    wreg      void 
  1314 ;; Registers used:
  1315 ;;		None
  1316 ;; Tracked objects:
  1317 ;;		On entry : 0/0
  1318 ;;		On exit  : 0/0
  1319 ;;		Unchanged: 0/0
  1320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1321 ;;      Params:         0       0       0       0       0
  1322 ;;      Locals:         0       0       0       0       0
  1323 ;;      Temps:          0       0       0       0       0
  1324 ;;      Totals:         0       0       0       0       0
  1325 ;;Total ram usage:        0 bytes
  1326 ;; Hardware stack levels used:    1
  1327 ;; This function calls:
  1328 ;;		Nothing
  1329 ;; This function is called by:
  1330 ;;		_main
  1331 ;; This function uses a non-reentrant model
  1332 ;;
  1333                           
  1334                           
  1335                           ;psect for function _restart
  1336  05A0                     _restart:	
  1337  05A0                     l936:	
  1338                           ;incstack = 0
  1339                           ; Regs used in _restart: []
  1340                           
  1341                           
  1342                           ;iic.c: 48:     RSEN = 1;
  1343  05A0  1683               	bsf	3,5	;RP0=1, select bank1
  1344  05A1  1303               	bcf	3,6	;RP1=0, select bank1
  1345  05A2  1491               	bsf	17,1	;volatile
  1346  05A3                     l71:	
  1347                           ;iic.c: 49:     while (SSPIF == 0);
  1348                           
  1349  05A3  1283               	bcf	3,5	;RP0=0, select bank0
  1350  05A4  1D8C               	btfss	12,3	;volatile
  1351  05A5  2DA7               	goto	u341
  1352  05A6  2DA8               	goto	u340
  1353  05A7                     u341:	
  1354  05A7  2DA3               	goto	l71
  1355  05A8                     u340:	
  1356  05A8                     l73:	
  1357                           
  1358                           ;iic.c: 50:     SSPIF = 0;
  1359  05A8  118C               	bcf	12,3	;volatile
  1360  05A9                     l74:	
  1361  05A9  0008               	return
  1362  05AA                     __end_of_restart:	
  1363                           
  1364                           	psect	text7
  1365  05D4                     __ptext7:	
  1366 ;; *************** function _read *****************
  1367 ;; Defined at:
  1368 ;;		line 53 in file "iic.c"
  1369 ;; Parameters:    Size  Location     Type
  1370 ;;		None
  1371 ;; Auto vars:     Size  Location     Type
  1372 ;;		None
  1373 ;; Return value:  Size  Location     Type
  1374 ;;                  1    wreg      unsigned char 
  1375 ;; Registers used:
  1376 ;;		wreg
  1377 ;; Tracked objects:
  1378 ;;		On entry : 0/0
  1379 ;;		On exit  : 0/0
  1380 ;;		Unchanged: 0/0
  1381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1382 ;;      Params:         0       0       0       0       0
  1383 ;;      Locals:         0       0       0       0       0
  1384 ;;      Temps:          0       0       0       0       0
  1385 ;;      Totals:         0       0       0       0       0
  1386 ;;Total ram usage:        0 bytes
  1387 ;; Hardware stack levels used:    1
  1388 ;; This function calls:
  1389 ;;		Nothing
  1390 ;; This function is called by:
  1391 ;;		_main
  1392 ;; This function uses a non-reentrant model
  1393 ;;
  1394                           
  1395                           
  1396                           ;psect for function _read
  1397  05D4                     _read:	
  1398  05D4                     l938:	
  1399                           ;incstack = 0
  1400                           ; Regs used in _read: [wreg]
  1401                           
  1402                           
  1403                           ;iic.c: 55:     RCEN = 1;
  1404  05D4  1683               	bsf	3,5	;RP0=1, select bank1
  1405  05D5  1303               	bcf	3,6	;RP1=0, select bank1
  1406  05D6  1591               	bsf	17,3	;volatile
  1407  05D7                     l77:	
  1408                           ;iic.c: 56:     while (SSPIF == 0);
  1409                           
  1410  05D7  1283               	bcf	3,5	;RP0=0, select bank0
  1411  05D8  1D8C               	btfss	12,3	;volatile
  1412  05D9  2DDB               	goto	u351
  1413  05DA  2DDC               	goto	u350
  1414  05DB                     u351:	
  1415  05DB  2DD7               	goto	l77
  1416  05DC                     u350:	
  1417  05DC                     l79:	
  1418                           
  1419                           ;iic.c: 57:     SSPIF = 0;
  1420  05DC  118C               	bcf	12,3	;volatile
  1421  05DD                     l940:	
  1422                           
  1423                           ;iic.c: 58:     return SSPBUF;
  1424  05DD  0813               	movf	19,w	;volatile
  1425  05DE                     l80:	
  1426  05DE  0008               	return
  1427  05DF                     __end_of_read:	
  1428                           
  1429                           	psect	text8
  1430  05F8                     __ptext8:	
  1431 ;; *************** function _printToSerail *****************
  1432 ;; Defined at:
  1433 ;;		line 78 in file "iic.c"
  1434 ;; Parameters:    Size  Location     Type
  1435 ;;  message         1    wreg     PTR unsigned char 
  1436 ;;		 -> time(40), 
  1437 ;; Auto vars:     Size  Location     Type
  1438 ;;  message         1    4[COMMON] PTR unsigned char 
  1439 ;;		 -> time(40), 
  1440 ;;  i               2    2[COMMON] int 
  1441 ;; Return value:  Size  Location     Type
  1442 ;;                  1    wreg      void 
  1443 ;; Registers used:
  1444 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1445 ;; Tracked objects:
  1446 ;;		On entry : 0/0
  1447 ;;		On exit  : 0/0
  1448 ;;		Unchanged: 0/0
  1449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1450 ;;      Params:         0       0       0       0       0
  1451 ;;      Locals:         3       0       0       0       0
  1452 ;;      Temps:          2       0       0       0       0
  1453 ;;      Totals:         5       0       0       0       0
  1454 ;;Total ram usage:        5 bytes
  1455 ;; Hardware stack levels used:    1
  1456 ;; This function calls:
  1457 ;;		Nothing
  1458 ;; This function is called by:
  1459 ;;		_main
  1460 ;; This function uses a non-reentrant model
  1461 ;;
  1462                           
  1463                           
  1464                           ;psect for function _printToSerail
  1465  05F8                     _printToSerail:	
  1466                           
  1467                           ;incstack = 0
  1468                           ; Regs used in _printToSerail: [wreg-fsr0h+status,2+status,0]
  1469                           ;printToSerail@message stored from wreg
  1470  05F8  00F4               	movwf	printToSerail@message
  1471  05F9                     l948:	
  1472                           
  1473                           ;iic.c: 79:     for (int i = 0;message[i]!='\0'; i++) {
  1474  05F9  01F2               	clrf	printToSerail@i
  1475  05FA  01F3               	clrf	printToSerail@i+1
  1476  05FB  2E1A               	goto	l954
  1477  05FC                     l950:	
  1478                           
  1479                           ;iic.c: 81:         TXREG = message[i];
  1480  05FC  0872               	movf	printToSerail@i,w
  1481  05FD  0774               	addwf	printToSerail@message,w
  1482  05FE  00F0               	movwf	??_printToSerail
  1483  05FF  0870               	movf	??_printToSerail,w
  1484  0600  0084               	movwf	4
  1485  0601  0800               	movf	0,w
  1486  0602  1283               	bcf	3,5	;RP0=0, select bank0
  1487  0603  1303               	bcf	3,6	;RP1=0, select bank0
  1488  0604  0099               	movwf	25	;volatile
  1489  0605                     l97:	
  1490                           ;iic.c: 82:         while (TRMT == 0);
  1491                           
  1492  0605  1683               	bsf	3,5	;RP0=1, select bank1
  1493  0606  1303               	bcf	3,6	;RP1=0, select bank1
  1494  0607  1C98               	btfss	24,1	;volatile
  1495  0608  2E0A               	goto	u381
  1496  0609  2E0B               	goto	u380
  1497  060A                     u381:	
  1498  060A  2E05               	goto	l97
  1499  060B                     u380:	
  1500  060B                     l952:	
  1501                           
  1502                           ;iic.c: 83:         _delay((unsigned long)((100)*(4000000/4000.0)));
  1503  060B  3082               	movlw	130
  1504  060C  00F1               	movwf	??_printToSerail+1
  1505  060D  30DD               	movlw	221
  1506  060E  00F0               	movwf	??_printToSerail
  1507  060F                     u477:	
  1508  060F  0BF0               	decfsz	??_printToSerail,f
  1509  0610  2E0F               	goto	u477
  1510  0611  0BF1               	decfsz	??_printToSerail+1,f
  1511  0612  2E0F               	goto	u477
  1512  0613  2E14               	nop2
  1513                           
  1514                           ;iic.c: 84:     }
  1515  0614  3001               	movlw	1
  1516  0615  07F2               	addwf	printToSerail@i,f
  1517  0616  1803               	skipnc
  1518  0617  0AF3               	incf	printToSerail@i+1,f
  1519  0618  3000               	movlw	0
  1520  0619  07F3               	addwf	printToSerail@i+1,f
  1521  061A                     l954:	
  1522  061A  0872               	movf	printToSerail@i,w
  1523  061B  0774               	addwf	printToSerail@message,w
  1524  061C  00F0               	movwf	??_printToSerail
  1525  061D  0870               	movf	??_printToSerail,w
  1526  061E  0084               	movwf	4
  1527  061F  1383               	bcf	3,7	;select IRP bank0
  1528  0620  0800               	movf	0,w
  1529  0621  1D03               	btfss	3,2
  1530  0622  2E24               	goto	u391
  1531  0623  2E25               	goto	u390
  1532  0624                     u391:	
  1533  0624  2DFC               	goto	l950
  1534  0625                     u390:	
  1535  0625                     l101:	
  1536  0625  0008               	return
  1537  0626                     __end_of_printToSerail:	
  1538                           
  1539                           	psect	text9
  1540  05C9                     __ptext9:	
  1541 ;; *************** function _nack *****************
  1542 ;; Defined at:
  1543 ;;		line 71 in file "iic.c"
  1544 ;; Parameters:    Size  Location     Type
  1545 ;;		None
  1546 ;; Auto vars:     Size  Location     Type
  1547 ;;		None
  1548 ;; Return value:  Size  Location     Type
  1549 ;;                  1    wreg      void 
  1550 ;; Registers used:
  1551 ;;		None
  1552 ;; Tracked objects:
  1553 ;;		On entry : 0/0
  1554 ;;		On exit  : 0/0
  1555 ;;		Unchanged: 0/0
  1556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1557 ;;      Params:         0       0       0       0       0
  1558 ;;      Locals:         0       0       0       0       0
  1559 ;;      Temps:          0       0       0       0       0
  1560 ;;      Totals:         0       0       0       0       0
  1561 ;;Total ram usage:        0 bytes
  1562 ;; Hardware stack levels used:    1
  1563 ;; This function calls:
  1564 ;;		Nothing
  1565 ;; This function is called by:
  1566 ;;		_main
  1567 ;; This function uses a non-reentrant model
  1568 ;;
  1569                           
  1570                           
  1571                           ;psect for function _nack
  1572  05C9                     _nack:	
  1573  05C9                     l946:	
  1574                           ;incstack = 0
  1575                           ; Regs used in _nack: []
  1576                           
  1577                           
  1578                           ;iic.c: 72:     ACKDT = 1;
  1579  05C9  1683               	bsf	3,5	;RP0=1, select bank1
  1580  05CA  1303               	bcf	3,6	;RP1=0, select bank1
  1581  05CB  1691               	bsf	17,5	;volatile
  1582                           
  1583                           ;iic.c: 73:     ACKEN = 1;
  1584  05CC  1611               	bsf	17,4	;volatile
  1585  05CD                     l89:	
  1586                           ;iic.c: 74:     while (SSPIF == 0);
  1587                           
  1588  05CD  1283               	bcf	3,5	;RP0=0, select bank0
  1589  05CE  1D8C               	btfss	12,3	;volatile
  1590  05CF  2DD1               	goto	u371
  1591  05D0  2DD2               	goto	u370
  1592  05D1                     u371:	
  1593  05D1  2DCD               	goto	l89
  1594  05D2                     u370:	
  1595  05D2                     l91:	
  1596                           
  1597                           ;iic.c: 75:     SSPIF = 0;
  1598  05D2  118C               	bcf	12,3	;volatile
  1599  05D3                     l92:	
  1600  05D3  0008               	return
  1601  05D4                     __end_of_nack:	
  1602                           
  1603                           	psect	text10
  1604  05BE                     __ptext10:	
  1605 ;; *************** function _ack *****************
  1606 ;; Defined at:
  1607 ;;		line 62 in file "iic.c"
  1608 ;; Parameters:    Size  Location     Type
  1609 ;;		None
  1610 ;; Auto vars:     Size  Location     Type
  1611 ;;		None
  1612 ;; Return value:  Size  Location     Type
  1613 ;;                  1    wreg      void 
  1614 ;; Registers used:
  1615 ;;		None
  1616 ;; Tracked objects:
  1617 ;;		On entry : 0/0
  1618 ;;		On exit  : 0/0
  1619 ;;		Unchanged: 0/0
  1620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1621 ;;      Params:         0       0       0       0       0
  1622 ;;      Locals:         0       0       0       0       0
  1623 ;;      Temps:          0       0       0       0       0
  1624 ;;      Totals:         0       0       0       0       0
  1625 ;;Total ram usage:        0 bytes
  1626 ;; Hardware stack levels used:    1
  1627 ;; This function calls:
  1628 ;;		Nothing
  1629 ;; This function is called by:
  1630 ;;		_main
  1631 ;; This function uses a non-reentrant model
  1632 ;;
  1633                           
  1634                           
  1635                           ;psect for function _ack
  1636  05BE                     _ack:	
  1637  05BE                     l944:	
  1638                           ;incstack = 0
  1639                           ; Regs used in _ack: []
  1640                           
  1641                           
  1642                           ;iic.c: 63:     ACKDT = 0;
  1643  05BE  1683               	bsf	3,5	;RP0=1, select bank1
  1644  05BF  1303               	bcf	3,6	;RP1=0, select bank1
  1645  05C0  1291               	bcf	17,5	;volatile
  1646                           
  1647                           ;iic.c: 64:     ACKEN = 1;
  1648  05C1  1611               	bsf	17,4	;volatile
  1649  05C2                     l83:	
  1650                           ;iic.c: 65:     while (SSPIF == 0);
  1651                           
  1652  05C2  1283               	bcf	3,5	;RP0=0, select bank0
  1653  05C3  1D8C               	btfss	12,3	;volatile
  1654  05C4  2DC6               	goto	u361
  1655  05C5  2DC7               	goto	u360
  1656  05C6                     u361:	
  1657  05C6  2DC2               	goto	l83
  1658  05C7                     u360:	
  1659  05C7                     l85:	
  1660                           
  1661                           ;iic.c: 66:     SSPIF = 0;
  1662  05C7  118C               	bcf	12,3	;volatile
  1663  05C8                     l86:	
  1664  05C8  0008               	return
  1665  05C9                     __end_of_ack:	
  1666  007E                     btemp	set	126	;btemp
  1667  007E                     wtemp0	set	126


Data Sizes:
    Strings     28
    Constant    8
    Data        0
    BSS         43
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      11
    BANK0            80     22      65
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 11
		 -> STR_1(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 40
		 -> time(BANK0[40]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    printToSerail@message	PTR unsigned char  size(1) Largest target is 40
		 -> time(BANK0[40]), 


Critical Paths under _main in COMMON

    _main->_sprintf
    _sprintf->___lwdiv

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0     977
                                             15 BANK0      7     7      0
                                _ack
                               _nack
                      _printToSerail
                               _read
                            _restart
                               _send
                            _sprintf
                              _start
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _start                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             26    19      7     832
                                              8 COMMON     3     3      0
                                              0 BANK0     15     8      7
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     314
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _send                                                 5     3      2      22
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (1) _restart                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _read                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _printToSerail                                        5     5      0     123
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (1) _nack                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ack                                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ack
   _nack
   _printToSerail
   _read
   _restart
   _send
   _sprintf
     ___lwdiv
   _start
   _stop

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      B       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      4C       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     16      41       5       81.3%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      4C      12        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Tue Jun 10 19:28:37 2025

                      pc 0002              __CFG_CP$OFF 0000                       l61 05E8  
                     l53 05AD                       l62 05F7                       l71 05A3  
                     l55 05B2                       l80 05DE                       l56 05B3  
                     l73 05A8                       l65 05B7                       l74 05A9  
                     l83 05C2                       l91 05D2                       l59 05E4  
                     l67 05BC                       l92 05D3                       l68 05BD  
                     l85 05C7                       l77 05D7                       l86 05C8  
                     l79 05DC                       l89 05CD                       l97 0605  
                     fsr 0004              __CFG_LVP$ON 0000                      l101 0625  
                    l222 072D                      l900 0626                      l910 063C  
                    l902 0628                      l920 065F                      l912 0640  
                    l904 062E                      l930 05E9                      l498 0669  
                    l914 0651                      l906 0631                      l922 0665  
                    l940 05DD                      l916 0657                      l908 0638  
                    l950 05FC                      l918 0658                      l926 05AA  
                    l934 05B4                      l944 05BE                      l952 060B  
                    l936 05A0                      l928 05E0                      l960 0678  
                    l946 05C9                      l954 061A                      l938 05D4  
                    l970 069E                      l962 067F                      l948 05F9  
                    l980 06AC                      l972 06A6                      l964 0684  
                    l956 066D                      l990 06F8                      l974 06AA  
                    l958 0672                      l992 0703                      l984 06C8  
                    l968 0684                      l994 070A                      l986 06D2  
                    l988 06D7                      l996 070E                      l998 0717  
                    u300 0665                      u301 0664                      u310 05B2  
                    u311 05B1                      u320 05E8                      u240 062E  
                    u400 0678                      u321 05E7                      u241 062D  
                    u401 0677                      u410 06C7                      u330 05BC  
                    u411 06C6                      u331 05BB                      u340 05A8  
                    u260 0640                      u420 06D2                      u341 05A7  
                    u261 063F                      u421 06D1                      u350 05DC  
                    u430 0717                      u351 05DB                      u255 0632  
                    u431 0716                      u415 06C3                      u360 05C7  
                    u280 0651                      u440 0729                      _PEN 048A  
                    u361 05C6                      u281 0650                      u441 0728  
                    u370 05D2                      u450 0757             __CFG_CPD$OFF 0000  
                    u371 05D1                      u275 0641                      u451 0756  
                    u380 060B                      u460 0785                      u381 060A  
                    u285 064D                      u461 0784                      u390 0625  
                    u391 0624                      u295 0659                      _SEN 0488  
                    u477 060F                      _ack 05BE                      fsr0 0004  
                    indf 0000                     l1000 0729                     l1010 073A  
                   l1020 0757                     l1012 073B                     ?_ack 0070  
                   l1030 0785                     l1022 076F                     l1014 0746  
                   l1040 07AF                     l1032 078B                     l1024 0774  
                   l1008 072E                     l1042 07B4                     l1034 0790  
                   l1018 074B                     l1044 07C8                     l1036 0796  
                   l1028 0779                     l1046 07E9                     l1038 07A0  
                   l1068 0696                     STR_1 0022                     STR_2 0011  
                   _RCEN 048B                     _RSEN 0489                     _TRMT 04C1  
           __CFG_WRT$OFF 0000                     _nack 05C9                     _main 072E  
                   _read 05D4                     _hour 0020                     _send 05DF  
                   _time 0023                     btemp 007E                     _stop 05B4  
          __CFG_BOREN$ON 0000                     start 0000                    ??_ack 0070  
                  ?_nack 0070                    ?_main 0070                    _ACKEN 048C  
                  _ACKDT 048D                    ?_read 0070                    ?_send 0070  
          __CFG_WDTE$OFF 0000                    ?_stop 0070          __end_of___lwdiv 066A  
        ??_printToSerail 0070                    _RCSTA 0018                    _SPBRG 0099  
                  _SSPIF 0063                    _TXREG 0019                    _TXSTA 0098  
                  _start 05AA                    pclath 000A          __end_of_restart 05AA  
                  status 0003                    wtemp0 007E          __end_of_sprintf 072E  
        __initialization 07F3             __end_of_nack 05D4             __end_of_main 07F3  
           __end_of_read 05DF             __end_of_send 05F8             __end_of_stop 05BE  
         printToSerail@i 0072                   ??_nack 0070                   ??_main 005A  
                 ??_read 0070                   ??_send 0072                   ??_stop 0070  
                 ?_start 0070                   _SSPADD 0093                   _TRISC3 043B  
                 _TRISC4 043C                   _SSPBUF 0013                   _SSPCON 0014  
         __CFG_PWRTE$OFF 0000                ??___lwdiv 0074                   _second 0022  
                 send@ch 0074                ??_restart 0070                ??_sprintf 0078  
        __CFG_FOSC$EXTRC 0000  __end_of__initialization 07FC           __pcstackCOMMON 0070  
          __end_of_start 05B4     printToSerail@message 0074                  ??_start 0070  
             __pbssBANK0 0020               __pmaintext 072E                  _ACKSTAT 048E  
                _SSPSTAT 0094               __stringtab 0003                  ___lwdiv 0626  
                __ptext1 05B4                  __ptext2 05AA                  __ptext3 066A  
                __ptext4 0626                  __ptext5 05DF                  __ptext6 05A0  
                __ptext7 05D4                  __ptext8 05F8                  __ptext9 05C9  
      __end_of_hexpowers 0011             __size_of_ack 000B                  _minitue 0021  
  __end_of_printToSerail 0626                  _restart 05A0                  _sprintf 066A  
                clrloop0 0599     end_of_initialization 07FC      start_initialization 07F3  
            __end_of_ack 05C9                ___latbits 0002            __pcstackBANK0 004B  
            sprintf@prec 0057         ___lwdiv@dividend 0072                 ?___lwdiv 0070  
              __pstrings 0003                 ?_restart 0070                _hexpowers 0009  
       ___lwdiv@quotient 0075                 ?_sprintf 004B           __size_of_start 000A  
              clear_ram0 0598              __stringbase 0008   __size_of_printToSerail 002E  
       __size_of___lwdiv 0044       __end_of__stringtab 0009               sprintf@idx 0053  
             sprintf@val 0055          ___lwdiv@divisor 0070          ___lwdiv@counter 0077  
               __ptext10 05BE         __size_of_restart 000A         __size_of_sprintf 00C4  
          __size_of_nack 000B            __size_of_main 00C5            __size_of_read 000B  
          __size_of_send 0019            __size_of_stop 000A            _printToSerail 05F8  
              sprintf@ap 0054                sprintf@sp 0058                stringcode 0003  
               sprintf@c 0059                 sprintf@f 004B           ?_printToSerail 0070  
               stringdir 0003                 stringtab 0003  
