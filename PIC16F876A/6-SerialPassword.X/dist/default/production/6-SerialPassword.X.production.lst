

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Tue May 27 22:52:30 2025

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    15                           	dabs	1,0x7E,2
    16  0000                     
    17                           ; Version 2.10
    18                           ; Generated 31/07/2019 GMT
    19                           ; 
    20                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC16F877A Definitions
    49                           ; 
    50                           ; SFR Addresses
    51  0000                     	;# 
    52  0001                     	;# 
    53  0002                     	;# 
    54  0003                     	;# 
    55  0004                     	;# 
    56  0005                     	;# 
    57  0006                     	;# 
    58  0007                     	;# 
    59  0008                     	;# 
    60  0009                     	;# 
    61  000A                     	;# 
    62  000B                     	;# 
    63  000C                     	;# 
    64  000D                     	;# 
    65  000E                     	;# 
    66  000E                     	;# 
    67  000F                     	;# 
    68  0010                     	;# 
    69  0011                     	;# 
    70  0012                     	;# 
    71  0013                     	;# 
    72  0014                     	;# 
    73  0015                     	;# 
    74  0015                     	;# 
    75  0016                     	;# 
    76  0017                     	;# 
    77  0018                     	;# 
    78  0019                     	;# 
    79  001A                     	;# 
    80  001B                     	;# 
    81  001B                     	;# 
    82  001C                     	;# 
    83  001D                     	;# 
    84  001E                     	;# 
    85  001F                     	;# 
    86  0081                     	;# 
    87  0085                     	;# 
    88  0086                     	;# 
    89  0087                     	;# 
    90  0088                     	;# 
    91  0089                     	;# 
    92  008C                     	;# 
    93  008D                     	;# 
    94  008E                     	;# 
    95  0091                     	;# 
    96  0092                     	;# 
    97  0093                     	;# 
    98  0094                     	;# 
    99  0098                     	;# 
   100  0099                     	;# 
   101  009C                     	;# 
   102  009D                     	;# 
   103  009E                     	;# 
   104  009F                     	;# 
   105  010C                     	;# 
   106  010D                     	;# 
   107  010E                     	;# 
   108  010F                     	;# 
   109  018C                     	;# 
   110  018D                     	;# 
   111  0000                     	;# 
   112  0001                     	;# 
   113  0002                     	;# 
   114  0003                     	;# 
   115  0004                     	;# 
   116  0005                     	;# 
   117  0006                     	;# 
   118  0007                     	;# 
   119  0008                     	;# 
   120  0009                     	;# 
   121  000A                     	;# 
   122  000B                     	;# 
   123  000C                     	;# 
   124  000D                     	;# 
   125  000E                     	;# 
   126  000E                     	;# 
   127  000F                     	;# 
   128  0010                     	;# 
   129  0011                     	;# 
   130  0012                     	;# 
   131  0013                     	;# 
   132  0014                     	;# 
   133  0015                     	;# 
   134  0015                     	;# 
   135  0016                     	;# 
   136  0017                     	;# 
   137  0018                     	;# 
   138  0019                     	;# 
   139  001A                     	;# 
   140  001B                     	;# 
   141  001B                     	;# 
   142  001C                     	;# 
   143  001D                     	;# 
   144  001E                     	;# 
   145  001F                     	;# 
   146  0081                     	;# 
   147  0085                     	;# 
   148  0086                     	;# 
   149  0087                     	;# 
   150  0088                     	;# 
   151  0089                     	;# 
   152  008C                     	;# 
   153  008D                     	;# 
   154  008E                     	;# 
   155  0091                     	;# 
   156  0092                     	;# 
   157  0093                     	;# 
   158  0094                     	;# 
   159  0098                     	;# 
   160  0099                     	;# 
   161  009C                     	;# 
   162  009D                     	;# 
   163  009E                     	;# 
   164  009F                     	;# 
   165  010C                     	;# 
   166  010D                     	;# 
   167  010E                     	;# 
   168  010F                     	;# 
   169  018C                     	;# 
   170  018D                     	;# 
   171  001A                     _RCREG	set	26
   172  0019                     _TXREG	set	25
   173  0018                     _RCSTA	set	24
   174  0065                     _RCIF	set	101
   175  0099                     _SPBRG	set	153
   176  0098                     _TXSTA	set	152
   177  04C1                     _TRMT	set	1217
   178                           
   179                           	psect	strings
   180  0003                     __pstrings:	
   181  0003                     stringtab:	
   182  0003                     __stringtab:	
   183                           
   184                           ;	String table - string pointers are 1 byte each
   185  0003  1BFF               	btfsc	btemp+1,7
   186  0004  280D               	ljmp	stringcode
   187  0005  1383               	bcf	3,7
   188  0006  187F               	btfsc	btemp+1,0
   189  0007  1783               	bsf	3,7
   190  0008  0800               	movf	0,w
   191  0009  0A84               	incf	4,f
   192  000A  1903               	skipnz
   193  000B  0AFF               	incf	btemp+1,f
   194  000C  0008               	return
   195  000D                     stringcode:	
   196  000D                     stringdir:	
   197  000D  3000               	movlw	high stringdir
   198  000E  008A               	movwf	10
   199  000F  0804               	movf	4,w
   200  0010  0A84               	incf	4,f
   201  0011  0782               	addwf	2,f
   202  0012                     __stringbase:	
   203  0012  3400               	retlw	0
   204  0013                     __end_of__stringtab:	
   205  0013                     STR_1:	
   206  0013  340D               	retlw	13
   207  0014  3420               	retlw	32	;' '
   208  0015  3445               	retlw	69	;'E'
   209  0016  346E               	retlw	110	;'n'
   210  0017  3474               	retlw	116	;'t'
   211  0018  3465               	retlw	101	;'e'
   212  0019  3472               	retlw	114	;'r'
   213  001A  3420               	retlw	32	;' '
   214  001B  3479               	retlw	121	;'y'
   215  001C  346F               	retlw	111	;'o'
   216  001D  3475               	retlw	117	;'u'
   217  001E  3472               	retlw	114	;'r'
   218  001F  3420               	retlw	32	;' '
   219  0020  3473               	retlw	115	;'s'
   220  0021  3469               	retlw	105	;'i'
   221  0022  3478               	retlw	120	;'x'
   222  0023  3420               	retlw	32	;' '
   223  0024  3463               	retlw	99	;'c'
   224  0025  3468               	retlw	104	;'h'
   225  0026  3461               	retlw	97	;'a'
   226  0027  3472               	retlw	114	;'r'
   227  0028  3461               	retlw	97	;'a'
   228  0029  3463               	retlw	99	;'c'
   229  002A  3474               	retlw	116	;'t'
   230  002B  3465               	retlw	101	;'e'
   231  002C  3472               	retlw	114	;'r'
   232  002D  3420               	retlw	32	;' '
   233  002E  3470               	retlw	112	;'p'
   234  002F  3461               	retlw	97	;'a'
   235  0030  3473               	retlw	115	;'s'
   236  0031  3473               	retlw	115	;'s'
   237  0032  3477               	retlw	119	;'w'
   238  0033  346F               	retlw	111	;'o'
   239  0034  3472               	retlw	114	;'r'
   240  0035  3464               	retlw	100	;'d'
   241  0036  342E               	retlw	46	;'.'
   242  0037  342E               	retlw	46	;'.'
   243  0038  342E               	retlw	46	;'.'
   244  0039  340D               	retlw	13
   245  003A  3400               	retlw	0
   246  003B                     STR_5:	
   247  003B  340D               	retlw	13
   248  003C  3420               	retlw	32	;' '
   249  003D  3441               	retlw	65	;'A'
   250  003E  3475               	retlw	117	;'u'
   251  003F  3474               	retlw	116	;'t'
   252  0040  3468               	retlw	104	;'h'
   253  0041  3465               	retlw	101	;'e'
   254  0042  346E               	retlw	110	;'n'
   255  0043  3474               	retlw	116	;'t'
   256  0044  3469               	retlw	105	;'i'
   257  0045  3463               	retlw	99	;'c'
   258  0046  3461               	retlw	97	;'a'
   259  0047  3474               	retlw	116	;'t'
   260  0048  3469               	retlw	105	;'i'
   261  0049  346F               	retlw	111	;'o'
   262  004A  346E               	retlw	110	;'n'
   263  004B  3420               	retlw	32	;' '
   264  004C  3446               	retlw	70	;'F'
   265  004D  3461               	retlw	97	;'a'
   266  004E  3469               	retlw	105	;'i'
   267  004F  346C               	retlw	108	;'l'
   268  0050  3475               	retlw	117	;'u'
   269  0051  3472               	retlw	114	;'r'
   270  0052  3465               	retlw	101	;'e'
   271  0053  3421               	retlw	33	;'!'
   272  0054  3421               	retlw	33	;'!'
   273  0055  3421               	retlw	33	;'!'
   274  0056  3420               	retlw	32	;' '
   275  0057  340D               	retlw	13
   276  0058  3400               	retlw	0
   277  0059                     STR_4:	
   278  0059  340D               	retlw	13
   279  005A  3441               	retlw	65	;'A'
   280  005B  3475               	retlw	117	;'u'
   281  005C  3474               	retlw	116	;'t'
   282  005D  3468               	retlw	104	;'h'
   283  005E  3465               	retlw	101	;'e'
   284  005F  346E               	retlw	110	;'n'
   285  0060  3474               	retlw	116	;'t'
   286  0061  3469               	retlw	105	;'i'
   287  0062  3463               	retlw	99	;'c'
   288  0063  3461               	retlw	97	;'a'
   289  0064  3474               	retlw	116	;'t'
   290  0065  3469               	retlw	105	;'i'
   291  0066  346F               	retlw	111	;'o'
   292  0067  346E               	retlw	110	;'n'
   293  0068  3420               	retlw	32	;' '
   294  0069  3453               	retlw	83	;'S'
   295  006A  3475               	retlw	117	;'u'
   296  006B  3463               	retlw	99	;'c'
   297  006C  3463               	retlw	99	;'c'
   298  006D  3465               	retlw	101	;'e'
   299  006E  3473               	retlw	115	;'s'
   300  006F  3473               	retlw	115	;'s'
   301  0070  3466               	retlw	102	;'f'
   302  0071  3475               	retlw	117	;'u'
   303  0072  346C               	retlw	108	;'l'
   304  0073  340D               	retlw	13
   305  0074  3400               	retlw	0
   306  0075                     STR_3:	
   307  0075  3431               	retlw	49	;'1'
   308  0076  3432               	retlw	50	;'2'
   309  0077  3433               	retlw	51	;'3'
   310  0078  3434               	retlw	52	;'4'
   311  0079  3435               	retlw	53	;'5'
   312  007A  3436               	retlw	54	;'6'
   313  007B  3400               	retlw	0
   314  007C                     STR_2:	
   315  007C  342A               	retlw	42	;'*'
   316  007D  3400               	retlw	0
   317                           
   318                           ; #config settings
   319  0000                     
   320                           	psect	cinit
   321  07F8                     start_initialization:	
   322  07F8                     __initialization:	
   323                           
   324                           ; Clear objects allocated to BANK0
   325  07F8  1283               	bcf	3,5	;RP0=0, select bank0
   326  07F9  1303               	bcf	3,6	;RP1=0, select bank0
   327  07FA  01CB               	clrf	__pbssBANK0& (0+127)
   328  07FB  01CC               	clrf	(__pbssBANK0+1)& (0+127)
   329  07FC                     end_of_initialization:	
   330                           ;End of C runtime variable initialization code
   331                           
   332  07FC                     __end_of__initialization:	
   333  07FC  0183               	clrf	3
   334  07FD  120A  118A  2EAF   	ljmp	_main	;jump to C main() function
   335                           
   336                           	psect	bssBANK0
   337  004B                     __pbssBANK0:	
   338  004B                     _flag:	
   339  004B                     	ds	2
   340                           
   341                           	psect	cstackCOMMON
   342  0070                     __pcstackCOMMON:	
   343  0070                     ?_read:	
   344  0070                     ?_receive:	
   345                           ; 1 bytes @ 0x0
   346                           
   347  0070                     ??_receive:	
   348                           ; 1 bytes @ 0x0
   349                           
   350  0070                     ?_main:	
   351                           ; 1 bytes @ 0x0
   352                           
   353  0070                     ?_strlen:	
   354                           ; 1 bytes @ 0x0
   355                           
   356  0070                     ?_strcmp:	
   357                           ; 2 bytes @ 0x0
   358                           
   359  0070                     strcmp@s2:	
   360                           ; 2 bytes @ 0x0
   361                           
   362  0070                     strlen@s:	
   363                           ; 1 bytes @ 0x0
   364                           
   365                           
   366                           ; 2 bytes @ 0x0
   367  0070                     	ds	1
   368  0071                     receive@ch:	
   369                           
   370                           ; 1 bytes @ 0x1
   371  0071                     	ds	1
   372  0072                     ??_strlen:	
   373  0072                     ??_strcmp:	
   374                           ; 1 bytes @ 0x2
   375                           
   376  0072                     strlen@cp:	
   377                           ; 1 bytes @ 0x2
   378                           
   379                           
   380                           ; 2 bytes @ 0x2
   381  0072                     	ds	2
   382  0074                     ?_printMessage:	
   383  0074                     printMessage@textMessage:	
   384                           ; 1 bytes @ 0x4
   385                           
   386                           
   387                           ; 2 bytes @ 0x4
   388  0074                     	ds	1
   389  0075                     strcmp@r:	
   390                           
   391                           ; 1 bytes @ 0x5
   392  0075                     	ds	1
   393  0076                     ??_printMessage:	
   394  0076                     strcmp@s1:	
   395                           ; 1 bytes @ 0x6
   396                           
   397                           
   398                           ; 1 bytes @ 0x6
   399  0076                     	ds	3
   400  0079                     printMessage@i:	
   401                           
   402                           ; 2 bytes @ 0x9
   403  0079                     	ds	2
   404  007B                     ??_read:	
   405                           
   406                           ; 1 bytes @ 0xB
   407  007B                     	ds	2
   408  007D                     ??_main:	
   409                           
   410                           	psect	cstackBANK0
   411  0020                     __pcstackBANK0:	
   412                           ; 1 bytes @ 0xD
   413                           
   414  0020                     read@i:	
   415                           
   416                           ; 2 bytes @ 0x0
   417  0020                     	ds	2
   418  0022                     read@message:	
   419                           
   420                           ; 1 bytes @ 0x2
   421  0022                     	ds	1
   422  0023                     main@input:	
   423                           
   424                           ; 40 bytes @ 0x3
   425  0023                     	ds	40
   426                           
   427                           	psect	maintext
   428  06AF                     __pmaintext:	
   429 ;;
   430 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   431 ;;
   432 ;; *************** function _main *****************
   433 ;; Defined at:
   434 ;;		line 28 in file "serialPassword.c"
   435 ;; Parameters:    Size  Location     Type
   436 ;;		None
   437 ;; Auto vars:     Size  Location     Type
   438 ;;  input          40    3[BANK0 ] unsigned char [40]
   439 ;; Return value:  Size  Location     Type
   440 ;;                  1    wreg      void 
   441 ;; Registers used:
   442 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   443 ;; Tracked objects:
   444 ;;		On entry : B00/0
   445 ;;		On exit  : 0/0
   446 ;;		Unchanged: 0/0
   447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   448 ;;      Params:         0       0       0       0       0
   449 ;;      Locals:         0      40       0       0       0
   450 ;;      Temps:          0       0       0       0       0
   451 ;;      Totals:         0      40       0       0       0
   452 ;;Total ram usage:       40 bytes
   453 ;; Hardware stack levels required when called:    4
   454 ;; This function calls:
   455 ;;		_printMessage
   456 ;;		_read
   457 ;; This function is called by:
   458 ;;		Startup code after reset
   459 ;; This function uses a non-reentrant model
   460 ;;
   461                           
   462                           
   463                           ;psect for function _main
   464  06AF                     _main:	
   465  06AF                     l799:	
   466                           ;incstack = 0
   467                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   468                           
   469                           
   470                           ;serialPassword.c: 30:     TXSTA = 0x25;
   471  06AF  3025               	movlw	37
   472  06B0  1683               	bsf	3,5	;RP0=1, select bank1
   473  06B1  1303               	bcf	3,6	;RP1=0, select bank1
   474  06B2  0098               	movwf	24	;volatile
   475                           
   476                           ;serialPassword.c: 31:     RCSTA = 0x90;
   477  06B3  3090               	movlw	144
   478  06B4  1283               	bcf	3,5	;RP0=0, select bank0
   479  06B5  1303               	bcf	3,6	;RP1=0, select bank0
   480  06B6  0098               	movwf	24	;volatile
   481                           
   482                           ;serialPassword.c: 32:     SPBRG = 24;
   483  06B7  3018               	movlw	24
   484  06B8  1683               	bsf	3,5	;RP0=1, select bank1
   485  06B9  1303               	bcf	3,6	;RP1=0, select bank1
   486  06BA  0099               	movwf	25	;volatile
   487  06BB                     l801:	
   488                           
   489                           ;serialPassword.c: 34:     char input[40];;serialPassword.c: 37:     printMessage("\r En
      +                          ter your six character password...\r");
   490  06BB  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   491  06BC  00F4               	movwf	printMessage@textMessage
   492  06BD  3080               	movlw	128
   493  06BE  00F5               	movwf	printMessage@textMessage+1
   494  06BF  120A  118A  278C  120A  118A  	fcall	_printMessage
   495  06C4                     l803:	
   496                           
   497                           ;serialPassword.c: 38:     read(input);
   498  06C4  3023               	movlw	(low (main@input| 0))& (0+255)
   499  06C5  120A  118A  2724  120A  118A  	fcall	_read
   500  06CA                     l31:	
   501  06CA  120A  118A  2800   	ljmp	start
   502  06CD                     __end_of_main:	
   503                           
   504                           	psect	text1
   505  0724                     __ptext1:	
   506 ;; *************** function _read *****************
   507 ;; Defined at:
   508 ;;		line 63 in file "serialPassword.c"
   509 ;; Parameters:    Size  Location     Type
   510 ;;  message         1    wreg     PTR unsigned char 
   511 ;;		 -> main@input(40), 
   512 ;; Auto vars:     Size  Location     Type
   513 ;;  message         1    2[BANK0 ] PTR unsigned char 
   514 ;;		 -> main@input(40), 
   515 ;;  i               2    0[BANK0 ] int 
   516 ;; Return value:  Size  Location     Type
   517 ;;                  1    wreg      void 
   518 ;; Registers used:
   519 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   520 ;; Tracked objects:
   521 ;;		On entry : 0/0
   522 ;;		On exit  : 0/0
   523 ;;		Unchanged: 0/0
   524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   525 ;;      Params:         0       0       0       0       0
   526 ;;      Locals:         0       3       0       0       0
   527 ;;      Temps:          2       0       0       0       0
   528 ;;      Totals:         2       3       0       0       0
   529 ;;Total ram usage:        5 bytes
   530 ;; Hardware stack levels used:    1
   531 ;; Hardware stack levels required when called:    3
   532 ;; This function calls:
   533 ;;		_printMessage
   534 ;;		_receive
   535 ;;		_strcmp
   536 ;; This function is called by:
   537 ;;		_main
   538 ;; This function uses a non-reentrant model
   539 ;;
   540                           
   541                           
   542                           ;psect for function _read
   543  0724                     _read:	
   544                           
   545                           ;incstack = 0
   546                           ; Regs used in _read: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   547                           ;read@message stored from wreg
   548  0724  1283               	bcf	3,5	;RP0=0, select bank0
   549  0725  1303               	bcf	3,6	;RP1=0, select bank0
   550  0726  00A2               	movwf	read@message
   551  0727                     l779:	
   552                           
   553                           ;serialPassword.c: 65:     for (int i = 0;; i++) {
   554  0727  01A0               	clrf	read@i
   555  0728  01A1               	clrf	read@i+1
   556  0729                     l781:	
   557                           
   558                           ;serialPassword.c: 67:         message[i] = receive();
   559  0729  120A  118A  26A3  120A  118A  	fcall	_receive
   560  072E  00FB               	movwf	??_read
   561  072F  1283               	bcf	3,5	;RP0=0, select bank0
   562  0730  1303               	bcf	3,6	;RP1=0, select bank0
   563  0731  0820               	movf	read@i,w
   564  0732  0722               	addwf	read@message,w
   565  0733  00FC               	movwf	??_read+1
   566  0734  087C               	movf	??_read+1,w
   567  0735  0084               	movwf	4
   568  0736  087B               	movf	??_read,w
   569  0737  1383               	bcf	3,7	;select IRP bank0
   570  0738  0080               	movwf	0
   571  0739                     l783:	
   572                           
   573                           ;serialPassword.c: 69:         if (message[i] == '\r') {
   574  0739  0820               	movf	read@i,w
   575  073A  0722               	addwf	read@message,w
   576  073B  00FB               	movwf	??_read
   577  073C  087B               	movf	??_read,w
   578  073D  0084               	movwf	4
   579  073E  300D               	movlw	13
   580  073F  0600               	xorwf	0,w
   581  0740  1D03               	btfss	3,2
   582  0741  2F43               	goto	u251
   583  0742  2F44               	goto	u250
   584  0743                     u251:	
   585  0743  2F4B               	goto	l787
   586  0744                     u250:	
   587  0744                     l785:	
   588                           
   589                           ;serialPassword.c: 70:             message[i] = '\0';
   590  0744  0820               	movf	read@i,w
   591  0745  0722               	addwf	read@message,w
   592  0746  00FB               	movwf	??_read
   593  0747  087B               	movf	??_read,w
   594  0748  0084               	movwf	4
   595  0749  0180               	clrf	0
   596                           
   597                           ;serialPassword.c: 71:             break;
   598  074A  2F5D               	goto	l791
   599  074B                     l787:	
   600                           
   601                           ;serialPassword.c: 74:         printMessage("*");
   602  074B  306A               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   603  074C  00F4               	movwf	printMessage@textMessage
   604  074D  3080               	movlw	128
   605  074E  00F5               	movwf	printMessage@textMessage+1
   606  074F  120A  118A  278C  120A  118A  	fcall	_printMessage
   607  0754                     l789:	
   608                           
   609                           ;serialPassword.c: 75:     }
   610  0754  3001               	movlw	1
   611  0755  1283               	bcf	3,5	;RP0=0, select bank0
   612  0756  1303               	bcf	3,6	;RP1=0, select bank0
   613  0757  07A0               	addwf	read@i,f
   614  0758  1803               	skipnc
   615  0759  0AA1               	incf	read@i+1,f
   616  075A  3000               	movlw	0
   617  075B  07A1               	addwf	read@i+1,f
   618  075C  2F29               	goto	l781
   619  075D                     l791:	
   620                           
   621                           ;serialPassword.c: 77:     printMessage(message);
   622  075D  0822               	movf	read@message,w
   623  075E  00F4               	movwf	printMessage@textMessage
   624  075F  3000               	movlw	0
   625  0760  00F5               	movwf	printMessage@textMessage+1
   626  0761  120A  118A  278C  120A  118A  	fcall	_printMessage
   627  0766                     l793:	
   628                           
   629                           ;serialPassword.c: 78:     if (strcmp("123456", message) != 0) {
   630  0766  1283               	bcf	3,5	;RP0=0, select bank0
   631  0767  1303               	bcf	3,6	;RP1=0, select bank0
   632  0768  0822               	movf	read@message,w
   633  0769  00FB               	movwf	??_read
   634  076A  087B               	movf	??_read,w
   635  076B  00F0               	movwf	strcmp@s2
   636  076C  3063               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   637  076D  120A  118A  26F1  120A  118A  	fcall	_strcmp
   638  0772  0870               	movf	?_strcmp,w
   639  0773  0471               	iorwf	?_strcmp+1,w
   640  0774  1903               	btfsc	3,2
   641  0775  2F77               	goto	u261
   642  0776  2F78               	goto	u260
   643  0777                     u261:	
   644  0777  2F82               	goto	l797
   645  0778                     u260:	
   646  0778                     l795:	
   647                           
   648                           ;serialPassword.c: 79:         printMessage("\rAuthentication Successful\r");
   649  0778  3047               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   650  0779  00F4               	movwf	printMessage@textMessage
   651  077A  3080               	movlw	128
   652  077B  00F5               	movwf	printMessage@textMessage+1
   653  077C  120A  118A  278C  120A  118A  	fcall	_printMessage
   654                           
   655                           ;serialPassword.c: 80:     } else {
   656  0781  2F8B               	goto	l53
   657  0782                     l797:	
   658                           
   659                           ;serialPassword.c: 81:         printMessage("\r Authentication Failure!!! \r");
   660  0782  3029               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
   661  0783  00F4               	movwf	printMessage@textMessage
   662  0784  3080               	movlw	128
   663  0785  00F5               	movwf	printMessage@textMessage+1
   664  0786  120A  118A  278C  120A  118A  	fcall	_printMessage
   665  078B                     l53:	
   666  078B  0008               	return
   667  078C                     __end_of_read:	
   668                           
   669                           	psect	text2
   670  06F1                     __ptext2:	
   671 ;; *************** function _strcmp *****************
   672 ;; Defined at:
   673 ;;		line 33 in file "D:\pic\sources\c90\common\strcmp.c"
   674 ;; Parameters:    Size  Location     Type
   675 ;;  s1              1    wreg     PTR const unsigned char 
   676 ;;		 -> STR_3(7), 
   677 ;;  s2              1    0[COMMON] PTR const unsigned char 
   678 ;;		 -> main@input(40), 
   679 ;; Auto vars:     Size  Location     Type
   680 ;;  s1              1    6[COMMON] PTR const unsigned char 
   681 ;;		 -> STR_3(7), 
   682 ;;  r               1    5[COMMON] char 
   683 ;; Return value:  Size  Location     Type
   684 ;;                  2    0[COMMON] int 
   685 ;; Registers used:
   686 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
   687 ;; Tracked objects:
   688 ;;		On entry : 0/0
   689 ;;		On exit  : 0/0
   690 ;;		Unchanged: 0/0
   691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   692 ;;      Params:         2       0       0       0       0
   693 ;;      Locals:         2       0       0       0       0
   694 ;;      Temps:          3       0       0       0       0
   695 ;;      Totals:         7       0       0       0       0
   696 ;;Total ram usage:        7 bytes
   697 ;; Hardware stack levels used:    2
   698 ;; This function calls:
   699 ;;		Nothing
   700 ;; This function is called by:
   701 ;;		_read
   702 ;; This function uses a non-reentrant model
   703 ;;
   704                           
   705                           
   706                           ;psect for function _strcmp
   707  06F1                     _strcmp:	
   708                           
   709                           ;incstack = 0
   710                           ; Regs used in _strcmp: [wreg-fsr0h+status,2+status,0+pclath]
   711                           ;strcmp@s1 stored from wreg
   712  06F1  00F6               	movwf	strcmp@s1
   713  06F2                     l765:	
   714  06F2  2EFB               	goto	l771
   715  06F3                     l767:	
   716  06F3  3001               	movlw	1
   717  06F4  00F2               	movwf	??_strcmp
   718  06F5  0872               	movf	??_strcmp,w
   719  06F6  07F6               	addwf	strcmp@s1,f
   720  06F7                     l769:	
   721  06F7  3001               	movlw	1
   722  06F8  00F2               	movwf	??_strcmp
   723  06F9  0872               	movf	??_strcmp,w
   724  06FA  07F0               	addwf	strcmp@s2,f
   725  06FB                     l771:	
   726  06FB  0870               	movf	strcmp@s2,w
   727  06FC  0084               	movwf	4
   728  06FD  1383               	bcf	3,7	;select IRP bank0
   729  06FE  0800               	movf	0,w
   730  06FF  00F2               	movwf	??_strcmp
   731  0700  0876               	movf	strcmp@s1,w
   732  0701  0084               	movwf	4
   733  0702  120A  118A  200D  120A  118A  	fcall	stringdir
   734  0707  00F3               	movwf	??_strcmp+1
   735  0708  0872               	movf	??_strcmp,w
   736  0709  0273               	subwf	??_strcmp+1,w
   737  070A  00F4               	movwf	??_strcmp+2
   738  070B  0874               	movf	??_strcmp+2,w
   739  070C  00F5               	movwf	strcmp@r
   740  070D  0875               	movf	strcmp@r,w
   741  070E  1D03               	btfss	3,2
   742  070F  2F11               	goto	u231
   743  0710  2F12               	goto	u230
   744  0711                     u231:	
   745  0711  2F1E               	goto	l775
   746  0712                     u230:	
   747  0712                     l773:	
   748  0712  0876               	movf	strcmp@s1,w
   749  0713  0084               	movwf	4
   750  0714  120A  118A  200D  120A  118A  	fcall	stringdir
   751  0719  3A00               	xorlw	0
   752  071A  1D03               	skipz
   753  071B  2F1D               	goto	u241
   754  071C  2F1E               	goto	u240
   755  071D                     u241:	
   756  071D  2EF3               	goto	l767
   757  071E                     u240:	
   758  071E                     l775:	
   759  071E  0875               	movf	strcmp@r,w
   760  071F  00F0               	movwf	?_strcmp
   761  0720  01F1               	clrf	?_strcmp+1
   762  0721  1BF0               	btfsc	?_strcmp,7
   763  0722  03F1               	decf	?_strcmp+1,f
   764  0723                     l595:	
   765  0723  0008               	return
   766  0724                     __end_of_strcmp:	
   767                           
   768                           	psect	text3
   769  06A3                     __ptext3:	
   770 ;; *************** function _receive *****************
   771 ;; Defined at:
   772 ;;		line 86 in file "serialPassword.c"
   773 ;; Parameters:    Size  Location     Type
   774 ;;		None
   775 ;; Auto vars:     Size  Location     Type
   776 ;;  ch              1    1[COMMON] unsigned char 
   777 ;; Return value:  Size  Location     Type
   778 ;;                  1    wreg      unsigned char 
   779 ;; Registers used:
   780 ;;		wreg
   781 ;; Tracked objects:
   782 ;;		On entry : 0/0
   783 ;;		On exit  : 0/0
   784 ;;		Unchanged: 0/0
   785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   786 ;;      Params:         0       0       0       0       0
   787 ;;      Locals:         1       0       0       0       0
   788 ;;      Temps:          1       0       0       0       0
   789 ;;      Totals:         2       0       0       0       0
   790 ;;Total ram usage:        2 bytes
   791 ;; Hardware stack levels used:    1
   792 ;; This function calls:
   793 ;;		Nothing
   794 ;; This function is called by:
   795 ;;		_read
   796 ;; This function uses a non-reentrant model
   797 ;;
   798                           
   799                           
   800                           ;psect for function _receive
   801  06A3                     _receive:	
   802  06A3                     l759:	
   803                           ;incstack = 0
   804                           ; Regs used in _receive: [wreg]
   805                           
   806  06A3                     l56:	
   807                           ;serialPassword.c: 88:     char ch;;serialPassword.c: 89:     while (RCIF == 0);
   808                           
   809  06A3  1283               	bcf	3,5	;RP0=0, select bank0
   810  06A4  1303               	bcf	3,6	;RP1=0, select bank0
   811  06A5  1E8C               	btfss	12,5	;volatile
   812  06A6  2EA8               	goto	u221
   813  06A7  2EA9               	goto	u220
   814  06A8                     u221:	
   815  06A8  2EA3               	goto	l56
   816  06A9                     u220:	
   817  06A9                     l761:	
   818                           
   819                           ;serialPassword.c: 90:     ch = RCREG;
   820  06A9  081A               	movf	26,w	;volatile
   821  06AA  00F0               	movwf	??_receive
   822  06AB  0870               	movf	??_receive,w
   823  06AC  00F1               	movwf	receive@ch
   824                           
   825                           ;serialPassword.c: 91:     return ch;
   826  06AD  0871               	movf	receive@ch,w
   827  06AE                     l59:	
   828  06AE  0008               	return
   829  06AF                     __end_of_receive:	
   830                           
   831                           	psect	text4
   832  078C                     __ptext4:	
   833 ;; *************** function _printMessage *****************
   834 ;; Defined at:
   835 ;;		line 45 in file "serialPassword.c"
   836 ;; Parameters:    Size  Location     Type
   837 ;;  textMessage     2    4[COMMON] PTR unsigned char 
   838 ;;		 -> STR_5(30), STR_4(28), STR_2(2), main@input(40), 
   839 ;;		 -> STR_1(40), 
   840 ;; Auto vars:     Size  Location     Type
   841 ;;  i               2    9[COMMON] int 
   842 ;; Return value:  Size  Location     Type
   843 ;;                  1    wreg      void 
   844 ;; Registers used:
   845 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   846 ;; Tracked objects:
   847 ;;		On entry : 0/0
   848 ;;		On exit  : 0/0
   849 ;;		Unchanged: 0/0
   850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   851 ;;      Params:         2       0       0       0       0
   852 ;;      Locals:         2       0       0       0       0
   853 ;;      Temps:          3       0       0       0       0
   854 ;;      Totals:         7       0       0       0       0
   855 ;;Total ram usage:        7 bytes
   856 ;; Hardware stack levels used:    1
   857 ;; Hardware stack levels required when called:    2
   858 ;; This function calls:
   859 ;;		_strlen
   860 ;; This function is called by:
   861 ;;		_main
   862 ;;		_read
   863 ;; This function uses a non-reentrant model
   864 ;;
   865                           
   866                           
   867                           ;psect for function _printMessage
   868  078C                     _printMessage:	
   869  078C                     l745:	
   870                           ;incstack = 0
   871                           ; Regs used in _printMessage: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   872                           
   873                           
   874                           ;serialPassword.c: 46:     if (flag == 0) {
   875  078C  1283               	bcf	3,5	;RP0=0, select bank0
   876  078D  1303               	bcf	3,6	;RP1=0, select bank0
   877  078E  084B               	movf	_flag,w
   878  078F  044C               	iorwf	_flag+1,w
   879  0790  1D03               	btfss	3,2
   880  0791  2F93               	goto	u151
   881  0792  2F94               	goto	u150
   882  0793                     u151:	
   883  0793  2FF7               	goto	l45
   884  0794                     u150:	
   885  0794                     l747:	
   886                           
   887                           ;serialPassword.c: 47:         for (int i = 0; textMessage[i]; i++) {
   888  0794  01F9               	clrf	printMessage@i
   889  0795  01FA               	clrf	printMessage@i+1
   890  0796  2FDB               	goto	l757
   891  0797                     l749:	
   892                           
   893                           ;serialPassword.c: 49:             TXREG = textMessage[i];
   894  0797  0879               	movf	printMessage@i,w
   895  0798  0774               	addwf	printMessage@textMessage,w
   896  0799  00F7               	movwf	??_printMessage+1
   897  079A  0875               	movf	printMessage@textMessage+1,w
   898  079B  00F6               	movwf	??_printMessage
   899  079C  1803               	skipnc
   900  079D  0AF6               	incf	??_printMessage,f
   901  079E  1FF9               	btfss	printMessage@i,7
   902  079F  2FA1               	goto	u160
   903  07A0  03F6               	decf	??_printMessage,f
   904  07A1                     u160:	
   905  07A1  0876               	movf	??_printMessage,w
   906  07A2  00F8               	movwf	??_printMessage+2
   907  07A3  0878               	movf	??_printMessage+2,w
   908  07A4  1283               	bcf	3,5	;RP0=0, select bank0
   909  07A5  1303               	bcf	3,6	;RP1=0, select bank0
   910  07A6  00FF               	movwf	btemp+1
   911  07A7  0877               	movf	??_printMessage+1,w
   912  07A8  0084               	movwf	4
   913  07A9  120A  118A  2003  120A  118A  	fcall	stringtab
   914  07AE  0099               	movwf	25	;volatile
   915  07AF                     l37:	
   916                           ;serialPassword.c: 50:             while (TRMT == 0);
   917                           
   918  07AF  1683               	bsf	3,5	;RP0=1, select bank1
   919  07B0  1303               	bcf	3,6	;RP1=0, select bank1
   920  07B1  1C98               	btfss	24,1	;volatile
   921  07B2  2FB4               	goto	u171
   922  07B3  2FB5               	goto	u170
   923  07B4                     u171:	
   924  07B4  2FAF               	goto	l37
   925  07B5                     u170:	
   926  07B5                     l751:	
   927                           
   928                           ;serialPassword.c: 54:             if (i == strlen(textMessage)) {
   929  07B5  0874               	movf	printMessage@textMessage,w
   930  07B6  00F0               	movwf	strlen@s
   931  07B7  0875               	movf	printMessage@textMessage+1,w
   932  07B8  00F1               	movwf	strlen@s+1
   933  07B9  120A  118A  26CD  120A  118A  	fcall	_strlen
   934  07BE  087A               	movf	printMessage@i+1,w
   935  07BF  0671               	xorwf	?_strlen+1,w
   936  07C0  1D03               	skipz
   937  07C1  2FC4               	goto	u185
   938  07C2  0879               	movf	printMessage@i,w
   939  07C3  0670               	xorwf	?_strlen,w
   940  07C4                     u185:	
   941  07C4  1D03               	skipz
   942  07C5  2FC7               	goto	u181
   943  07C6  2FC8               	goto	u180
   944  07C7                     u181:	
   945  07C7  2FD5               	goto	l755
   946  07C8                     u180:	
   947  07C8                     l753:	
   948                           
   949                           ;serialPassword.c: 55:                 flag = 1;
   950  07C8  3001               	movlw	1
   951  07C9  1283               	bcf	3,5	;RP0=0, select bank0
   952  07CA  1303               	bcf	3,6	;RP1=0, select bank0
   953  07CB  00CB               	movwf	_flag
   954  07CC  3000               	movlw	0
   955  07CD  00CC               	movwf	_flag+1
   956  07CE                     l41:	
   957                           ;serialPassword.c: 56:                 while (TRMT == 0);
   958                           
   959  07CE  1683               	bsf	3,5	;RP0=1, select bank1
   960  07CF  1303               	bcf	3,6	;RP1=0, select bank1
   961  07D0  1C98               	btfss	24,1	;volatile
   962  07D1  2FD3               	goto	u191
   963  07D2  2FD4               	goto	u190
   964  07D3                     u191:	
   965  07D3  2FCE               	goto	l41
   966  07D4                     u190:	
   967  07D4  2FF7               	goto	l45
   968  07D5                     l755:	
   969                           
   970                           ;serialPassword.c: 59:         }
   971  07D5  3001               	movlw	1
   972  07D6  07F9               	addwf	printMessage@i,f
   973  07D7  1803               	skipnc
   974  07D8  0AFA               	incf	printMessage@i+1,f
   975  07D9  3000               	movlw	0
   976  07DA  07FA               	addwf	printMessage@i+1,f
   977  07DB                     l757:	
   978  07DB  0879               	movf	printMessage@i,w
   979  07DC  0774               	addwf	printMessage@textMessage,w
   980  07DD  00F7               	movwf	??_printMessage+1
   981  07DE  0875               	movf	printMessage@textMessage+1,w
   982  07DF  00F6               	movwf	??_printMessage
   983  07E0  1803               	skipnc
   984  07E1  0AF6               	incf	??_printMessage,f
   985  07E2  1FF9               	btfss	printMessage@i,7
   986  07E3  2FE5               	goto	u200
   987  07E4  03F6               	decf	??_printMessage,f
   988  07E5                     u200:	
   989  07E5  0876               	movf	??_printMessage,w
   990  07E6  00F8               	movwf	??_printMessage+2
   991  07E7  0878               	movf	??_printMessage+2,w
   992  07E8  1283               	bcf	3,5	;RP0=0, select bank0
   993  07E9  1303               	bcf	3,6	;RP1=0, select bank0
   994  07EA  00FF               	movwf	btemp+1
   995  07EB  0877               	movf	??_printMessage+1,w
   996  07EC  0084               	movwf	4
   997  07ED  120A  118A  2003  120A  118A  	fcall	stringtab
   998  07F2  3A00               	xorlw	0
   999  07F3  1D03               	skipz
  1000  07F4  2FF6               	goto	u211
  1001  07F5  2FF7               	goto	u210
  1002  07F6                     u211:	
  1003  07F6  2F97               	goto	l749
  1004  07F7                     u210:	
  1005  07F7                     l45:	
  1006  07F7  0008               	return
  1007  07F8                     __end_of_printMessage:	
  1008                           
  1009                           	psect	text5
  1010  06CD                     __ptext5:	
  1011 ;; *************** function _strlen *****************
  1012 ;; Defined at:
  1013 ;;		line 4 in file "D:\pic\sources\c90\common\strlen.c"
  1014 ;; Parameters:    Size  Location     Type
  1015 ;;  s               2    0[COMMON] PTR const unsigned char 
  1016 ;;		 -> STR_5(30), STR_4(28), STR_2(2), main@input(40), 
  1017 ;;		 -> STR_1(40), 
  1018 ;; Auto vars:     Size  Location     Type
  1019 ;;  cp              2    2[COMMON] PTR const unsigned char 
  1020 ;;		 -> STR_5(30), STR_4(28), STR_2(2), main@input(40), 
  1021 ;;		 -> STR_1(40), 
  1022 ;; Return value:  Size  Location     Type
  1023 ;;                  2    0[COMMON] unsigned int 
  1024 ;; Registers used:
  1025 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  1026 ;; Tracked objects:
  1027 ;;		On entry : 0/0
  1028 ;;		On exit  : 0/0
  1029 ;;		Unchanged: 0/0
  1030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1031 ;;      Params:         2       0       0       0       0
  1032 ;;      Locals:         2       0       0       0       0
  1033 ;;      Temps:          0       0       0       0       0
  1034 ;;      Totals:         4       0       0       0       0
  1035 ;;Total ram usage:        4 bytes
  1036 ;; Hardware stack levels used:    2
  1037 ;; This function calls:
  1038 ;;		Nothing
  1039 ;; This function is called by:
  1040 ;;		_printMessage
  1041 ;; This function uses a non-reentrant model
  1042 ;;
  1043                           
  1044                           
  1045                           ;psect for function _strlen
  1046  06CD                     _strlen:	
  1047  06CD                     l735:	
  1048                           ;incstack = 0
  1049                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  1050                           
  1051  06CD  0870               	movf	strlen@s,w
  1052  06CE  00F2               	movwf	strlen@cp
  1053  06CF  0871               	movf	strlen@s+1,w
  1054  06D0  00F3               	movwf	strlen@cp+1
  1055  06D1  2ED8               	goto	l739
  1056  06D2                     l737:	
  1057  06D2  3001               	movlw	1
  1058  06D3  07F2               	addwf	strlen@cp,f
  1059  06D4  1803               	skipnc
  1060  06D5  0AF3               	incf	strlen@cp+1,f
  1061  06D6  3000               	movlw	0
  1062  06D7  07F3               	addwf	strlen@cp+1,f
  1063  06D8                     l739:	
  1064  06D8  0873               	movf	strlen@cp+1,w
  1065  06D9  1283               	bcf	3,5	;RP0=0, select bank0
  1066  06DA  1303               	bcf	3,6	;RP1=0, select bank0
  1067  06DB  00FF               	movwf	btemp+1
  1068  06DC  0872               	movf	strlen@cp,w
  1069  06DD  0084               	movwf	4
  1070  06DE  120A  118A  2003  120A  118A  	fcall	stringtab
  1071  06E3  3A00               	xorlw	0
  1072  06E4  1D03               	skipz
  1073  06E5  2EE7               	goto	u141
  1074  06E6  2EE8               	goto	u140
  1075  06E7                     u141:	
  1076  06E7  2ED2               	goto	l737
  1077  06E8                     u140:	
  1078  06E8                     l741:	
  1079  06E8  0870               	movf	strlen@s,w
  1080  06E9  0272               	subwf	strlen@cp,w
  1081  06EA  00F0               	movwf	?_strlen
  1082  06EB  0871               	movf	strlen@s+1,w
  1083  06EC  1C03               	skipc
  1084  06ED  0A71               	incf	strlen@s+1,w
  1085  06EE  0273               	subwf	strlen@cp+1,w
  1086  06EF  00F1               	movwf	?_strlen+1
  1087  06F0                     l601:	
  1088  06F0  0008               	return
  1089  06F1                     __end_of_strlen:	
  1090  007E                     btemp	set	126	;btemp
  1091  007E                     wtemp0	set	126


Data Sizes:
    Strings     107
    Constant    0
    Data        0
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80     43      45
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 40
		 -> STR_5(CODE[30]), STR_4(CODE[28]), STR_2(CODE[2]), main@input(BANK0[40]), 
		 -> STR_1(CODE[40]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 40
		 -> STR_5(CODE[30]), STR_4(CODE[28]), STR_2(CODE[2]), main@input(BANK0[40]), 
		 -> STR_1(CODE[40]), 

    strcmp@s2	PTR const unsigned char  size(1) Largest target is 40
		 -> main@input(BANK0[40]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 7
		 -> STR_3(CODE[7]), 

    read@message	PTR unsigned char  size(1) Largest target is 40
		 -> main@input(BANK0[40]), 

    printMessage@textMessage	PTR unsigned char  size(2) Largest target is 40
		 -> STR_5(CODE[30]), STR_4(CODE[28]), STR_2(CODE[2]), main@input(BANK0[40]), 
		 -> STR_1(CODE[40]), 


Critical Paths under _main in COMMON

    _main->_read
    _read->_printMessage
    _printMessage->_strlen

Critical Paths under _main in BANK0

    _main->_read

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                40    40      0    1825
                                              3 BANK0     40    40      0
                       _printMessage
                               _read
 ---------------------------------------------------------------------------------
 (1) _read                                                 5     5      0    1114
                                             11 COMMON     2     2      0
                                              0 BANK0      3     3      0
                       _printMessage
                            _receive
                             _strcmp
 ---------------------------------------------------------------------------------
 (3) _strcmp                                               7     5      2     200
                                              0 COMMON     7     5      2
 ---------------------------------------------------------------------------------
 (2) _receive                                              2     2      0      23
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _printMessage                                         7     5      2     680
                                              4 COMMON     7     5      2
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _strlen                                               4     2      2     166
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _printMessage
     _strlen
   _read
     _printMessage
       _strlen
     _receive
     _strcmp

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      D       D       1       92.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      3A       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     2B      2D       5       56.3%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      3A      12        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Tue May 27 22:52:30 2025

                      pc 0002              __CFG_CP$OFF 0000                       l31 06CA  
                     l41 07CE                       l37 07AF                       l45 07F7  
                     l53 078B                       l56 06A3                       l59 06AE  
                     fsr 0004              __CFG_LVP$ON 0000                      l601 06F0  
                    l801 06BB                      l803 06C4                      l741 06E8  
                    l735 06CD                      l751 07B5                      l737 06D2  
                    l753 07C8                      l745 078C                      l761 06A9  
                    l739 06D8                      l755 07D5                      l747 0794  
                    l595 0723                      l771 06FB                      l749 0797  
                    l757 07DB                      l773 0712                      l765 06F2  
                    l781 0729                      l759 06A3                      l775 071E  
                    l767 06F3                      l791 075D                      l783 0739  
                    l769 06F7                      l793 0766                      l785 0744  
                    l795 0778                      l787 074B                      l779 0727  
                    l797 0782                      l789 0754                      l799 06AF  
                    u200 07E5                      u210 07F7                      u211 07F6  
                    u140 06E8                      u220 06A9                      u141 06E7  
                    u221 06A8                      u150 0794                      u230 0712  
                    u151 0793                      u231 0711                      u160 07A1  
                    u240 071E                      u241 071D                      u170 07B5  
                    u250 0744                      u171 07B4                      u251 0743  
                    u180 07C8                      u260 0778                      u181 07C7  
                    u261 0777                      u190 07D4                      u191 07D3  
                    u185 07C4             __CFG_CPD$OFF 0000                      fsr0 0004  
                    indf 0000                     STR_1 0013                     STR_2 007C  
                   STR_3 0075                     STR_4 0059                     STR_5 003B  
                   _RCIF 0065                     _TRMT 04C1             __CFG_WRT$OFF 0000  
                   _flag 004B                     _main 06AF                     _read 0724  
                   btemp 007E            __CFG_BOREN$ON 0000            printMessage@i 0079  
                   start 0000                    ?_main 0070                    ?_read 0070  
          __CFG_WDTE$OFF 0000                    _RCREG 001A                    _RCSTA 0018  
                  _SPBRG 0099                    _TXREG 0019                    _TXSTA 0098  
        __end_of_receive 06AF                    read@i 0020                    pclath 000A  
                  status 0003                    wtemp0 007E          __initialization 07F8  
           __end_of_main 06CD             __end_of_read 078C                   ??_main 007D  
                 ??_read 007B              read@message 0022           __CFG_PWRTE$OFF 0000  
                 _strcmp 06F1                   _strlen 06CD                ??_receive 0070  
        __CFG_FOSC$EXTRC 0000  __end_of__initialization 07FC           __pcstackCOMMON 0070  
             __pbssBANK0 004B               __pmaintext 06AF                  ?_strcmp 0070  
                ?_strlen 0070               __stringtab 0003                  __ptext1 0724  
                __ptext2 06F1                  __ptext3 06A3                  __ptext4 078C  
                __ptext5 06CD          __size_of_strcmp 0033          __size_of_strlen 0024  
                _receive 06A3     end_of_initialization 07FC            ?_printMessage 0074  
                strcmp@r 0075                  strlen@s 0070           ??_printMessage 0076  
         __end_of_strcmp 0724           __end_of_strlen 06F1      start_initialization 07F8  
               ??_strcmp 0072                 ??_strlen 0072                ___latbits 0002  
          __pcstackBANK0 0020                __pstrings 0003                 ?_receive 0070  
   __end_of_printMessage 07F8              __stringbase 0012                main@input 0023  
     __end_of__stringtab 0013                receive@ch 0071         __size_of_receive 000C  
          __size_of_main 001E            __size_of_read 0068    __size_of_printMessage 006C  
              stringcode 000D  printMessage@textMessage 0074             _printMessage 078C  
               strcmp@s1 0076                 strcmp@s2 0070                 strlen@cp 0072  
               stringdir 000D                 stringtab 0003  
